{"version":3,"sources":["lib/component/DiagramSlotComponent.tsx","lib/component/DiagramBlockComponent.tsx","lib/state/helpers.ts","lib/component/buttons/AddButtonComponent.tsx","lib/component/buttons/RemoveButtonComponent.tsx","lib/component/DiagramButtonComponet.tsx","lib/component/DiagramConnectionComponent.tsx","logging/Config.ts","lib/component/DiagramSceneComponent.tsx","lib/layout/DiagramButtonLayout.ts","lib/state/DiagramStructure.ts","lib/layout/DiagramSlotLayout.ts","lib/layout/DiagramConnectionLayout.ts","lib/layout/DiagramBlockLayout.ts","lib/state/DiagramScene.ts","lib/state/DiagramBlock.ts","lib/state/DiagramButton.ts","lib/state/DiagramConnection.ts","lib/state/DiagramSlot.ts","lib/convert/DiagramConvert.ts","lib/component/DiagramEditComponent.tsx","components/MindMapComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DiagramSlotComponent","observer","transform","this","props","slot","position","x","y","onClick","evt","r","fill","React","Component","ScaledSvgText","myRef","createRef","autorun","block","finishedResizing","current","newWidth","getBBox","width","requestedWidth","ref","style","pointerEvents","userSelect","rect","height","dominantBaseline","textAnchor","name","DiagramBlockComponent","translate","onMouseDown","onDoubleClick","rx","type","isEdited","slots","map","key","onSelect","clientX","clientY","stopPropagation","click","doubleClick","MapList","Map","value","values","get","push","set","length","keys","uuidv4","replace","c","Math","random","toString","removeItems","array","elems","elem","index","indexOf","splice","distance","v","sqrt","AddButtonComponent","id","ry","stroke","strokeWidth","d","RemoveButtonComponent","DiagramButtonComponent","element","button","color","icon","DiagramConnectionComponent","x1","connection","fromPoint","y1","x2","toPoint","y2","CategoryServiceFactory","setDefaultConfiguration","CategoryConfiguration","LogLevel","Info","logMindMap","Category","mindMapDragLog","logDiagramBlockLayout","logDigramSceneComponent","DiagramSceneComponent","mouseDownPos","selectedBlock","dx","diagramScene","sceneTranslate","sceneTranslateDelta","dy","xmlns","xmlnsXlink","onMouseMove","onMouseUp","diagramBlocks","uid","pos","diagramConnections","activeButtons","clientToScene","info","editedBlock","undefined","onEdit","mousePos","setPosition","dragEnd","client","action","DiagramButtonLayout","buttons","regionButtons","positionHint","D","DiagramStructure","scene","blockUid","blockConnections","output","filter","from","input","to","childBlocks","getChildBlocks","result","computed","DiagramSlotLayout","diagramStructure","rootBlock","Error","rightChildBlocks","getOutputSlotConnections","rightBlocks","leftChildBlocks","leftBlocks","blocks","DiagramConnectionLayout","disposers","disposer","fromBlock","toBlock","setConnectionPosition","delay","fromPosition","name2slot","toPosition","defaultMMLayoutParams","hMargin","vMargin","DiagramBlockLayout","parameters","blockColumns","columnBlocks","childShift","blockHeight","blockChildWidth","columnWidth","columnCenter","blockPosition","inputConnections","i","empty","inputBlockConnections","oldColumn","newColumn","layoutColumns","columns","Array","sort","a","b","firstColumn","lastColumn","column","maxWidth","max","width1","updateChildHeight","updateChildPositions","blockUids","parentPos","totalHeight","childBlockUids","outputConnections","childrenHeight","res","parentUid","uids","blockIdxs","data","blockIdx","idx","xp","maxColumnIdx","minColumnIdx","min","x0","columnIdx","DiagramScene","buttonLayout","slotLayout","blockLayout","connectionLayout","changed","layout","layoutBlockButtons","on","observable","DiagramBlock","debugIdx","fireChangeRect","fireClick","fireDoubleClick","fireDragEnd","clickCallbacks","doubleClickCallbacks","changeRectCallbacks","dragEndCallbacks","callback","DiagramButton","DiagramConnection","DiagramSlot","DiagramConvert","json","root","children","left","addChildBlocksFromJson","right","jsonBlocks","parentBlock","jsonBlock","leftConnections","addChildBlocksFromScene","rightConnections","connections","newBlock","EditPosition","styled","div","p","MyInput","MyComponent","focus","setSelectionRange","onChange","target","onKeyDown","DiagramEditComponent","handleKeyDown","MM","MindMapComponent","vscode","addCallbacks","window","addEventListener","event","message","command","document","doc","setState","fromJSON","jsonDiagram","toJSON","postMessage","addButton","addBlock","removeButton","removeBlock","showBlockButtons","endDragging","setTimeout","console","log","newConnection","Slot","dragPosition","structure","occupiedBlocks","getBlocks","concat","parentBlockIdx","blockColumn","getBlockColumn","positionColumn","getColumnIdx","getChildIdx","newIdx","nextBlock","nextConnection","nextConnectionIdx","cidx","App","acquireVsCodeApi","getState","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.945ba727.chunk.js","sourcesContent":["import React from 'react';\nimport { DiagramSlot } from '../state/DiagramSlot';\nimport { observer } from 'mobx-react';\n\n@observer\nexport class DiagramSlotComponent extends React.Component<{ slot: DiagramSlot }> {\n    render() {\n        return <g transform={`translate(${this.props.slot.position.x},${this.props.slot.position.y}) rotate(0)`} onClick={evt => this.onClick(evt)} >\n            <circle r=\"3\" fill=\"gray\" />\n        </g>\n    }\n\n    onClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        //this.props.button.click()\n    }\n\n}","import React from 'react';\nimport { DiagramBlock } from '../state/DiagramBlock';\nimport { observer } from 'mobx-react'\nimport { DiagramSlotComponent } from './DiagramSlotComponent';\nimport { Vec2d } from '../state/helpers';\nimport { autorun } from 'mobx';\n\n\n@observer\nclass ScaledSvgText extends React.Component<{ block: DiagramBlock }> {\n\n    private myRef = React.createRef<SVGTextElement>()\n    constructor(props: any) {\n        super(props)\n        autorun(()=> {\n            if (this.props.block.finishedResizing && this.myRef.current) {\n                let newWidth = this.myRef.current.getBBox().width + 20\n                if (newWidth != this.props.block.requestedWidth) this.props.block.requestedWidth = newWidth\n\n            }\n        })\n    }\n\n    componentDidMount() {\n        if (this.myRef.current)\n            this.props.block.requestedWidth = this.myRef.current.getBBox().width + 20\n    }\n    /*componentDidUpdate() {\n        if (this.myRef.current && this.props.block.finishedResizing) {\n            console.log(\"Did update\")\n            let newWidth = this.myRef.current.getBBox().width + 20\n            console.log(newWidth, this.props.block.requestedWidth)   \n            if (newWidth && (newWidth != this.props.block.requestedWidth)){\n                console.log(newWidth, this.props.block.requestedWidth)   \n                this.props.block.requestedWidth = newWidth\n            }\n\n        }\n\n    }*/\n\n\n    render() {\n        return <text ref={this.myRef} style={{ pointerEvents: \"none\", userSelect: \"none\" }} x={this.props.block.rect.width / 2} y={this.props.block.rect.height / 2} dominantBaseline=\"middle\" textAnchor=\"middle\">{this.props.block.name}</text>\n\n    }\n}\n\n@observer\nexport class DiagramBlockComponent extends React.Component<{ block: DiagramBlock, onSelect: (block: DiagramBlock, pos: Vec2d) => void }, {}> {\n\n    render() {\n        //{!(this.props.block.type===\"mmroot\"?:null)}\n        return <g transform={`translate(${this.props.block.rect.x + this.props.block.translate.x},${this.props.block.rect.y + this.props.block.translate.y}) rotate(0)`} onMouseDown={evt => this.onMouseDown(evt)} onClick={evt => this.onClick(evt)} onDoubleClick={evt => this.onDoubleClick(evt)}>\n            <rect width={this.props.block.rect.width} height={this.props.block.rect.height} fill=\"white\" style={{ \"stroke\": \"#006600\" }} rx={5} />\n            \n\n            {this.props.block.type === \"mmroot\"?<rect x=\"3\" y=\"3\" width={this.props.block.rect.width-6} height={this.props.block.rect.height-6} fill=\"white\" style={{ \"stroke\": \"#006600\" }} rx={5} /> :null }\n            {!this.props.block.isEdited?<ScaledSvgText block={this.props.block} />: null}\n    \n            {this.props.block.slots.map(slot => <DiagramSlotComponent key={slot.key} slot={slot} />)}\n        </g>\n    }\n\n    onMouseDown(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n\n        this.props.onSelect(this.props.block, { x: evt.clientX, y: evt.clientY })\n        evt.stopPropagation()\n    }\n\n    onClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        this.props.block.click()\n        evt.stopPropagation()\n    }\n\n    onDoubleClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        this.props.block.doubleClick()\n    }\n\n}","import { func } from \"prop-types\"\n\nexport interface Vec2d { x: number, y: number }\nexport interface Rect { x: number, y: number, width: number, height: number }\nexport class MapList<Key, Value> {\n    map: Map<Key, Value[]> = new Map()\n\n    push(key: Key, value: Value) {\n        let values = this.map.get(key) || []\n        values.push(value)\n        this.map.set(key, values)\n    }\n\n    get(key: Key) {\n        return this.map.get(key) || []\n    }\n\n    empty(key: Key) {\n        return this.get(key).length === 0\n    }\n\n    keys() {\n        return this.map.keys()\n\n    }\n}\n\nexport function uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\n        return v.toString(16);\n    });\n}\n\nexport function removeItems<T>(array: Array<T>, ...elems: T[]) : Array<T> {\n    for (let elem of elems) {\n        let index = array.indexOf(elem)\n        if (index !== -1) {\n             array.splice(index, 1)\n        }\n    }\n    return array\n}\n\nexport function distance( v : Vec2d) {\n    return Math.sqrt(v.x * v.x + v.y * v.y)\n}","import React from 'react';\nimport { DiagramButton } from '../../state/DiagramButton';\n\nexport class AddButtonComponent extends React.Component {\n    render() {\n        return <g  >\n\n<g\n       id=\"g3979\"\n       transform=\"translate(-0.10620686,-0.56696429)\">\n      <rect\n         ry=\"1.0444876\"\n         y=\"-9.3742828\"\n         x=\"-9.8492556\"\n         height=\"19.63636\"\n         width=\"19.425177\"\n         id=\"rect3942\"\n         style={{fill:\"white\",stroke:\"#000000\",strokeWidth:\"1\"}} \n         />\n      <path\n         id=\"rect3944\"\n         d=\"m -3.3174074,-7.0890472 c -0.5786464,0 -1.0443792,0.4657354 -1.0443792,1.0443818 v 2.1626565 h -2.1626592 c -0.5786464,0 -1.0443818,0.4657355 -1.0443818,1.0443819 v 6.7313729 c 0,0.5786438 0.4657354,1.0443792 1.0443818,1.0443792 h 2.1626592 v 2.1626592 c 0,0.5786464 0.4657328,1.0443792 1.0443792,1.0443792 h 6.7313729 c 0.5786464,0 1.0443819,-0.4657328 1.0443819,-1.0443792 V 4.9381251 h 2.1626565 c 0.5786464,0 1.0443818,-0.4657354 1.0443818,-1.0443792 V -2.837627 c 0,-0.5786464 -0.4657354,-1.0443819 -1.0443818,-1.0443819 H 4.4583474 v -2.1626565 c 0,-0.5786464 -0.4657355,-1.0443818 -1.0443819,-1.0443818 z\"\n         style={{fill:\"purple\",stroke:\"#000000\",strokeWidth:\"1\"}} \n\n         />\n    </g>\n            \n\n        </g >\n    }\n\n}","import React from 'react';\nimport { DiagramButton } from '../../state/DiagramButton';\n\nexport class RemoveButtonComponent extends React.Component {\n    render() {\n        return <g  >\n\n            <g\n                id=\"g3979\"\n                transform=\"translate(-0.10620686,-0.56696429)\">\n                <rect\n                    ry=\"1.0444876\"\n                    y=\"-9.3742828\"\n                    x=\"-9.8492556\"\n                    height=\"19.63636\"\n                    width=\"19.425177\"\n                    id=\"rect3942\"\n                    style={{ fill: \"white\", stroke: \"#000000\", strokeWidth: \"1\" }}\n                />\n                <rect\n                    style={{ fill: \"white\", stroke: \"#000000\", strokeWidth: \"1\" }}\n\n                    id=\"rect4021\"\n                    width=\"15.485204\"\n                    height=\"8.2242823\"\n                    x=\"-7.7426019\"\n                    y=\"-4.1617403\"\n                    ry=\"0.98811853\" />\n            </g>\n\n\n        </g >\n    }\n\n}","import React from 'react';\nimport { DiagramButton } from '../state/DiagramButton';\nimport { AddButtonComponent } from './buttons/AddButtonComponent';\nimport { RemoveButtonComponent } from './buttons/RemoveButtonComponent';\n\nexport class DiagramButtonComponent extends React.Component<{ button: DiagramButton }> {\n    render() {\n        let element = <rect width={10} height={10} fill={this.props.button.color} ></rect>;\n        switch (this.props.button.icon) {\n            case \"add\":\n                element = <AddButtonComponent />\n                break;\n            case \"remove\":\n                element = <RemoveButtonComponent />\n                break;\n\n        }\n\n        return <g transform={`translate(${this.props.button.position.x},${this.props.button.position.y}) rotate(0)`} onClick={evt => this.onClick(evt)} >\n            {element}\n\n        </g>\n    }\n\n    onClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        \n        this.props.button.click()\n    }\n\n}","import React from 'react';\nimport { DiagramConnection } from '../state/DiagramConnection';\nimport { observer } from 'mobx-react';\n\n@observer\nexport class DiagramConnectionComponent extends React.Component<{ connection: DiagramConnection }> {\n\n    render() {\n        const x1 = this.props.connection.fromPoint.x;\n        const y1 = this.props.connection.fromPoint.y;\n        const x2 = this.props.connection.toPoint.x;\n        const y2 = this.props.connection.toPoint.y;\n        const lineStyle = { stroke: \"rgb(255,0,0)\", strokeWidth: \"2\" ,fill:\"none\" };\n        //return <line style={lineStyle} x1={x1} y1={y1} x2={x2} y2={y2} />\n        return <path style={lineStyle} d={`M ${x1} ${y1} C ${x2} ${y1} ${x1} ${y2} ${x2} ${y2}`}/>\n    }\n\n}","import {Category,CategoryLogger,CategoryServiceFactory,CategoryConfiguration,LogLevel} from \"typescript-logging\";\n \n// Optionally change default settings, in this example set default logging to Info.\n// Without changing configuration, categories will log to Error.\nCategoryServiceFactory.setDefaultConfiguration(new CategoryConfiguration(LogLevel.Info));\n \n\n\n// Create categories, they will autoregister themselves, one category without parent (root) and a child category.\nexport const logMindMap = new Category(\"mindMap\");\nexport const mindMapDragLog = new Category(\"draging\", logMindMap);\nexport const logDiagramBlockLayout = new Category(\"diagramBlockLayout\", logMindMap);\n\nexport const logDigramSceneComponent = new Category(\"DiagramSceneComponent\");\n\n//export const catProdLog = new Category(\"product\", mindMapLog);","import React from 'react';\nimport { DiagramBlockComponent } from './DiagramBlockComponent';\nimport { DiagramBlock } from '../state/DiagramBlock';\nimport { DiagramScene } from '../state/DiagramScene';\nimport { observer } from 'mobx-react';\nimport { Vec2d, distance } from '../state/helpers';\nimport { DiagramButtonComponent } from './DiagramButtonComponet';\nimport { DiagramConnectionComponent } from './DiagramConnectionComponent';\nimport { observable, action } from 'mobx';\nimport { access } from 'fs';\nimport { logDigramSceneComponent } from '../../logging/Config';\n\n\n@observer\nexport class DiagramSceneComponent extends React.Component<{ diagramScene: DiagramScene }, {}> {\n\n    mouseDownPos?: Vec2d\n    selectedBlock?: DiagramBlock\n\n\n\n    render() {\n        let dx = this.props.diagramScene.sceneTranslate.x + this.props.diagramScene.sceneTranslateDelta.x\n        let dy = this.props.diagramScene.sceneTranslate.y + this.props.diagramScene.sceneTranslateDelta.y\n        return <svg\n            width=\"100%\"\n            height=\"100%\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            onMouseDown={evt => this.onMouseDown(evt)}\n            onMouseMove={evt => this.onMouseMove(evt)}\n            onMouseUp={evt => this.onMouseUp(evt)}\n            onClick={evt => this.onClick(evt)}\n        >\n\n            <g transform={`translate(${dx},${dy})`}>\n                {this.props.diagramScene.diagramBlocks.map(element =>\n                    <DiagramBlockComponent key={element.uid} block={element} onSelect={(block, pos) => this.onSelect(block, pos)} />\n                )}\n                {this.props.diagramScene.diagramConnections.map(element =>\n                    <DiagramConnectionComponent key={element.uid} connection={element} />\n                )}\n\n\n                {this.props.diagramScene.activeButtons.map(button => <DiagramButtonComponent key={button.uid} button={button} />)}\n            </g>\n        </svg>\n\n    }\n\n\n    onSelect(block: DiagramBlock, pos: Vec2d) {\n        this.mouseDownPos = this.clientToScene(pos)\n        this.selectedBlock = block\n\n\n    }\n\n    @action\n    onMouseDown(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        logDigramSceneComponent.info(\"onMouseDown\")\n        if (this.props.diagramScene.editedBlock) {\n            this.props.diagramScene.editedBlock.isEdited = false\n            this.props.diagramScene.editedBlock = undefined\n            this.props.diagramScene.onEdit = true\n        }\n\n        this.mouseDownPos = this.clientToScene({ x: evt.clientX, y: evt.clientY })\n\n    }\n\n    @action\n    onMouseMove(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n\n        if (this.mouseDownPos && this.selectedBlock) {\n            logDigramSceneComponent.info(\"onMouseMove block\")\n            let mousePos = this.clientToScene({ x: evt.clientX, y: evt.clientY })\n            this.selectedBlock.translate = { x: mousePos.x - this.mouseDownPos.x, y: mousePos.y - this.mouseDownPos.y }\n            this.props.diagramScene.activeButtons = []\n        } else if (this.mouseDownPos) {\n            logDigramSceneComponent.info(\"onMouseMove scene\")\n            let mousePos = this.clientToScene({ x: evt.clientX, y: evt.clientY });\n            let dx = mousePos.x - this.mouseDownPos.x\n            let dy = mousePos.y - this.mouseDownPos.y\n            let delta = distance({ x: dx, y: dy })\n            if (delta > 40)\n                this.props.diagramScene.sceneTranslateDelta = { x: dx, y: dy }\n\n\n        }\n    }\n    @action\n    onMouseUp(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        logDigramSceneComponent.info(\"onMouseUp\")\n        if (this.selectedBlock && this.mouseDownPos) {\n            let mousePos = this.clientToScene({ x: evt.clientX, y: evt.clientY })\n            let translate = { x: mousePos.x - this.mouseDownPos.x, y: mousePos.y - this.mouseDownPos.y }\n            let dist = distance(translate)\n            if (dist > 20) {\n\n\n                let position = { x: this.selectedBlock.rect.x + mousePos.x - this.mouseDownPos.x, y: this.selectedBlock.rect.y + mousePos.y - this.mouseDownPos.y, }\n                this.selectedBlock.setPosition(position)\n                this.selectedBlock.dragEnd(mousePos)\n            } else {\n                this.selectedBlock.translate = { x: 0, y: 0 }\n            }\n            this.selectedBlock = undefined\n            this.mouseDownPos = undefined\n\n        } else if (this.mouseDownPos) {\n            let mousePos = this.clientToScene({ x: evt.clientX, y: evt.clientY })\n\n            let dx = mousePos.x - this.mouseDownPos.x\n            let dy = mousePos.y - this.mouseDownPos.y\n            let delta = distance({ x: dx, y: dy })\n            if (delta > 40) {\n\n                this.props.diagramScene.sceneTranslate.x += dx;\n                this.props.diagramScene.sceneTranslate.y += dy;\n            }\n            this.props.diagramScene.sceneTranslateDelta = { x: 0, y: 0 }\n            this.mouseDownPos = undefined\n\n        }\n\n    }\n\n    clientToScene(client: Vec2d): Vec2d {\n        return { x: client.x - this.props.diagramScene.sceneTranslate.x, y: client.y - this.props.diagramScene.sceneTranslate.y }\n    }\n\n    onClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        this.props.diagramScene.activeButtons = []\n\n    }\n\n}","import { DiagramBlock } from \"../state/DiagramBlock\";\nimport { DiagramButton, DiagramButtonPositionHint } from \"../state/DiagramButton\";\nimport { MapList } from \"../state/helpers\";\n\nexport class DiagramButtonLayout {\n    layoutBlockButtons(block : DiagramBlock, buttons :DiagramButton[]) {\n        let regionButtons: MapList<DiagramButtonPositionHint, DiagramButton> = new MapList()\n\n        for (let button  of buttons) {\n            regionButtons.push(button.positionHint, button)\n        }\n\n        let rect = block.rect\n        let D = 20\n        let x = rect.x + rect.width - D / 2\n        let y = rect.y - D / 2 - D *0.2\n\n        for (let button of regionButtons.get(\"topRight\")) {\n            button.position = {x,y}\n            x -= D * 1.2\n        }\n\n\n    }\n}","import { DiagramScene } from \"./DiagramScene\";\nimport { computed } from \"mobx\";\nimport { DiagramBlock } from \"./DiagramBlock\";\nimport { DiagramConnection } from \"./DiagramConnection\";\nimport { MapList } from \"./helpers\";\n\nexport class DiagramStructure {\n    constructor(public scene: DiagramScene) {\n    }\n\n    @computed get blocks(): Map<string, DiagramBlock> {\n        let result = new Map<string, DiagramBlock>()\n        for (let block of this.scene.diagramBlocks) { result.set(block.uid, block) }\n        return result\n    }\n\n    @computed get blockConnections(): { input: MapList<string, DiagramConnection>, output: MapList<string, DiagramConnection> } {\n        let input = new MapList<string, DiagramConnection>()\n        let output = new MapList<string, DiagramConnection>()\n        for (let connection of this.scene.diagramConnections) {\n            input.push(connection.to.blockUid, connection)\n            output.push(connection.from.blockUid, connection)\n        }\n        return { input, output }\n    }\n\n    getOutputSlotConnections(blockUid: string, slot: string): DiagramConnection[] {\n        return this.blockConnections.output.get(blockUid).filter(connection => (connection.from.slot === slot))\n    }\n\n    getInputSlotConnections(blockUid: string, slot: string): DiagramConnection[] {\n        return this.blockConnections.input.get(blockUid).filter(connection => (connection.to.slot === slot))\n    }\n\n    getChildBlocks(blockUid: string): string[] {\n        let childBlocks: string[] = []\n        for (let connection of this.blockConnections.output.get(blockUid)) {\n            childBlocks.push(connection.to.blockUid)\n            childBlocks.push(...this.getChildBlocks(connection.to.blockUid))\n        }\n        return childBlocks\n    }\n\n}","import { DiagramStructure } from \"../state/DiagramStructure\";\nimport { DiagramBlock } from \"../state/DiagramBlock\";\nimport { action } from \"mobx\";\n\nexport class DiagramSlotLayout {\n    constructor(protected diagramStructure: DiagramStructure) {\n\n    }\n\n    @action\n    layout() {\n        let rootBlock = this.diagramStructure.scene.diagramBlocks[0]\n\n        if (rootBlock.type !== \"mmroot\") throw new Error(\"Invalid diagram structure\")\n        rootBlock.slots[0].position = { x: 0, y: rootBlock.rect.height / 2 }\n        rootBlock.slots[1].position = { x: rootBlock.rect.width, y: rootBlock.rect.height / 2 }\n\n        let rightChildBlocks = this.diagramStructure.getOutputSlotConnections(rootBlock.uid, \"or\")\n        let rightBlocks: string[] = []\n        for (let block of rightChildBlocks) {\n            rightBlocks.push(block.to.blockUid)\n            rightBlocks.push(...this.diagramStructure.getChildBlocks(block.to.blockUid))\n        }\n        let leftChildBlocks = this.diagramStructure.getOutputSlotConnections(rootBlock.uid, \"ol\")\n        let leftBlocks: string[] = []\n        for (let block of leftChildBlocks) {\n            leftBlocks.push(block.to.blockUid)\n            leftBlocks.push(...this.diagramStructure.getChildBlocks(block.to.blockUid))\n            //leftBlocks = leftBlocks.concat(,this.diagramData.getChildBlocks(block.toEndpoint.block))\n        }\n\n        for (let blockUid of rightBlocks) {\n            let block = this.diagramStructure.blocks.get(blockUid) as DiagramBlock\n            block.slots[0].position = { x: 0, y: block.rect.height / 2 }\n            block.slots[1].position = { x: block.rect.width, y: block.rect.height / 2 }\n        }\n\n        for (let blockUid of leftBlocks) {\n            let block = this.diagramStructure.blocks.get(blockUid) as DiagramBlock\n            block.slots[0].position = { x: block.rect.width, y: block.rect.height / 2 }\n            block.slots[1].position = { x: 0, y: block.rect.height / 2 }\n        }\n\n\n    }\n}","import { DiagramStructure } from \"../state/DiagramStructure\";\nimport { DiagramBlock } from \"../state/DiagramBlock\";\nimport { Vec2d } from \"../state/helpers\";\nimport { DiagramSlot } from \"../state/DiagramSlot\";\nimport { autorun, IReactionDisposer } from \"mobx\";\nimport { DiagramConnection } from \"../state/DiagramConnection\";\n\nexport class DiagramConnectionLayout {\n    constructor(private diagramStructure: DiagramStructure) { }\n    disposers : IReactionDisposer[] = []\n\n    layout() {\n        for (let disposer of this.disposers) disposer()\n\n        for (let connection of this.diagramStructure.scene.diagramConnections) {\n            let fromBlock = this.diagramStructure.blocks.get(connection.from.blockUid) as DiagramBlock\n            let toBlock = this.diagramStructure.blocks.get(connection.to.blockUid) as DiagramBlock\n            this.disposers.push(autorun(() => this.setConnectionPosition(connection, fromBlock, toBlock), {delay : 30 }))\n        }\n    }\n\n    setConnectionPosition(connection: DiagramConnection, fromBlock: DiagramBlock, toBlock: DiagramBlock) {\n        let fromPosition: Vec2d = (fromBlock.name2slot.get(connection.from.slot) as DiagramSlot).position\n        let toPosition: Vec2d = (toBlock.name2slot.get(connection.to.slot) as DiagramSlot).position\n        connection.fromPoint = { x: fromPosition.x + fromBlock.rect.x + fromBlock.translate.x, y: fromPosition.y + fromBlock.rect.y + fromBlock.translate.y }\n        connection.toPoint = { x: toPosition.x + toBlock.rect.x + toBlock.translate.x, y: toPosition.y + toBlock.rect.y+ toBlock.translate.y }\n    }\n}","import { DiagramStructure } from \"../state/DiagramStructure\";\nimport { MapList, Vec2d } from \"../state/helpers\";\nimport { DiagramBlock } from \"../state/DiagramBlock\";\nimport { logDiagramBlockLayout } from \"../../logging/Config\";\nlet defaultMMLayoutParams = {\n    hMargin: 30,\n    vMargin: 10\n}\n\nexport class DiagramBlockLayout {\n    blockColumns: Map<string, number> = new Map();\n    columnBlocks: MapList<number, string> = new MapList();\n    childShift: Map<string, number[]> = new Map()\n    blockHeight: Map<string, number> = new Map()\n    blockChildWidth: Map<string, number> = new Map()\n    columnWidth: Map<number, number> = new Map()\n    columnCenter: Map<number, number> = new Map()\n    blockPosition: Map<string, Vec2d> = new Map()\n\n    constructor(private diagramStructure: DiagramStructure, public parameters = defaultMMLayoutParams) { }\n\n\n\n    layoutColumns() {\n        if (!this.diagramStructure) throw new Error(\"Diagram data not defined\")\n        let blocks = this.diagramStructure.scene.diagramBlocks;\n        this.blockColumns = new Map()\n        this.columnBlocks = new MapList()\n        let inputConnections = this.diagramStructure.blockConnections.input\n        for (let i = 0; i < blocks.length; ++i) {\n            if (i === 0) {\n                this.blockColumns.set(blocks[i].uid, 0)\n                this.columnBlocks.push(i, blocks[i].uid)\n                if (!inputConnections.empty(blocks[i].uid)) {\n                    throw new Error(\"Invalid mm diagram blocks structure (first block must be root block - no input connections)\")\n                }\n            } else {\n                let inputBlockConnections = inputConnections.get(blocks[i].uid)\n                if (inputBlockConnections.length !== 1) {\n                    throw new Error(\"Invalid mm diagram blocks structure (each block except root must have exactly one input connection )\")\n                }\n\n                let oldColumn = this.blockColumns.get(inputBlockConnections[0].from.blockUid)\n                if (oldColumn === undefined) {\n                    throw new Error(\"Invalid mm diagram blocks structure (parent block must preceed child block)\")\n                } else {\n                    let newColumn = oldColumn\n                    if (newColumn === 0) {\n                        if (inputBlockConnections[0].from.slot === \"or\") {\n                            newColumn += 1\n                        } else {\n                            newColumn -= 1\n                        }\n                    } else if (newColumn > 0) newColumn += 1\n                    else if (newColumn < 0) newColumn -= 1\n                    this.blockColumns.set(blocks[i].uid, newColumn)\n                    this.columnBlocks.push(newColumn, blocks[i].uid)\n                }\n            }\n        }\n    }\n\n\n\n    layout() {\n        let { input, output } = this.diagramStructure.blockConnections\n\n        this.layoutColumns()\n        //console.log(blockColumns, columnBlocks)\n\n        let columns = Array.from(this.columnBlocks.keys()).sort((a, b) => (a - b))\n        let firstColumn = columns[0]\n        let lastColumn = columns[columns.length - 1]\n\n        for (let column = firstColumn; column <= lastColumn; ++column) {\n            let maxWidth = 0\n            for (let block of this.columnBlocks.get(column) as string[]) {\n                maxWidth = Math.max(maxWidth, (this.diagramStructure.blocks.get(block) as DiagramBlock).rect.width)\n            }\n            this.columnWidth.set(column, maxWidth)\n        }\n\n        let x = 0\n        this.columnCenter.set(0, 0)\n        for (let column = 1; column <= lastColumn; ++column) {\n            let width = this.columnWidth.get(column - 1) as number\n            let width1 = this.columnWidth.get(column) as number\n            x = x + width / 2 + this.parameters.hMargin + width1 / 2\n            this.columnCenter.set(column, x)\n        }\n        x = 0\n\n        for (let column = -1; column >= firstColumn; --column) {\n            let width = this.columnWidth.get(column + 1) as number\n            let width1 = this.columnWidth.get(column) as number\n            x = x - width / 2 - this.parameters.hMargin - width1 / 2\n            this.columnCenter.set(column, x)\n        }\n        let rootBlock = this.diagramStructure.scene.diagramBlocks[0]\n        if (input.get(rootBlock.uid).length > 0) {\n            throw new Error(\"Invalid diagram structure, root block has input connections\")\n        }\n\n        for (let connection of output.get(rootBlock.uid)) {\n            this.updateChildHeight(connection.to.blockUid)\n        }\n\n        this.blockPosition.set(rootBlock.uid, { x: 0, y: 0 })\n\n\n        this.updateChildPositions(1, this.columnBlocks.get(1), { x: 0, y: 0 })\n        this.updateChildPositions(-1, this.columnBlocks.get(-1), { x: 0, y: 0 })\n\n        for (let block of this.diagramStructure.scene.diagramBlocks) {\n            let position = this.blockPosition.get(block.uid) as Vec2d\n            block.rect = {\n                ...block.rect,\n                x: position.x - block.rect.width / 2,\n                y: position.y - block.rect.height / 2,\n            }\n\n        }\n    }\n\n    updateChildPositions(column: number, blockUids: string[], parentPos: Vec2d) {\n        if (!this.diagramStructure) throw new Error(\"Diagram data not defined\")\n        let totalHeight = 0\n        for (let blockUid of blockUids) {\n            let height = this.blockHeight.get(blockUid) as number\n            totalHeight += height\n        }\n        totalHeight += (blockUids.length - 1) * this.parameters.vMargin;\n        let y = parentPos.y - totalHeight / 2\n        let x = this.columnCenter.get(column) as number\n        if (column > 0) column += 1\n        else column -= 1\n        for (let blockUid of blockUids) {\n            let height = this.blockHeight.get(blockUid) as number\n            let pos = { x, y: y + height / 2 }\n            this.blockPosition.set(blockUid, pos)\n            let childBlockUids = this.diagramStructure.blockConnections.output.get(blockUid).map(connection => connection.to.blockUid)\n            this.updateChildPositions(column, childBlockUids, pos)\n            y += height + this.parameters.vMargin\n        }\n\n    }\n    updateChildHeight(blockUid: string) {\n        let block = this.diagramStructure.blocks.get(blockUid) as DiagramBlock\n        let outputConnections = this.diagramStructure.blockConnections.output.get(blockUid)\n        let childrenHeight = 0\n        for (let connection of outputConnections) {\n            childrenHeight += this.updateChildHeight(connection.to.blockUid)\n        }\n        childrenHeight += this.parameters.vMargin * (outputConnections.length - 1)\n        let blockHeight = Math.max(childrenHeight, block.rect.height)\n        this.blockHeight.set(blockUid, blockHeight)\n        return blockHeight\n    }\n\n    getBlockColumn(block: string): number {\n        return this.blockColumns.get(block) as number\n    }\n\n\n    getBlocks(pos: Vec2d): DiagramBlock[] {\n        let res: DiagramBlock[] = []\n        for (let block of this.diagramStructure.scene.diagramBlocks) {\n            let rect = block.rect\n            if ((pos.x > rect.x) && (pos.x < rect.x + rect.width) &&\n                (pos.y > rect.y) && (pos.y < rect.y + rect.height)) res.push(block)\n        }\n\n        return res\n    }\n\n    getChildIdx(blockUid: string, parentUid: string, y: number): [number, number[]] {\n        if (!this.diagramStructure) throw new Error(\"Diagram data not defined\")\n        let uids: string[] = []\n        let outputConnections = this.diagramStructure.blockConnections.output\n        for (let connection of outputConnections.get(parentUid)) {\n            uids.push(connection.to.blockUid)\n        }\n\n        uids = uids.filter(uid => (blockUid !== uid))\n        logDiagramBlockLayout.info(`Found child uids ${uids}`)\n\n        let blocks: DiagramBlock[] = uids.map(uid => this.diagramStructure.blocks.get(uid) as DiagramBlock)\n\n\n\n\n\n        let blockIdxs: number[] = blocks.map(block => this.diagramStructure.scene.diagramBlocks.indexOf(block)).sort((a, b) => a - b);\n        let data = blockIdxs.map(blockIdx => [blockIdx, this.diagramStructure.scene.diagramBlocks[blockIdx].rect.y, this.diagramStructure.scene.diagramBlocks[blockIdx].rect.height])\n        logDiagramBlockLayout.info(() => `getChildIdx block rects ${data}`)\n        let i = 0;\n        for (let idx of blockIdxs) {\n            let block = this.diagramStructure.scene.diagramBlocks[idx]\n            let rect = block.rect\n            let yc = rect.y + rect.height / 2\n            if (y < yc) break\n            i++\n        }\n        return [i, blockIdxs]\n    }\n\n    getColumnIdx(xp: number): number | null {\n        let maxColumnIdx: number = Math.max(...Array.from(this.columnWidth.keys()))\n        let minColumnIdx: number = Math.min(...Array.from(this.columnWidth.keys()))\n        let x0 = - (this.columnWidth.get(0) as number) / 2\n        //console.log(\"gCI\", xp, this.columnWidth, minColumnIdx, maxColumnIdx, Array.from(this.columnWidth.keys()))\n        if (xp >= x0) {\n\n            for (let columnIdx = 0; columnIdx <= maxColumnIdx; ++columnIdx) {\n                x0 += this.columnWidth.get(columnIdx) as number\n                if (xp < x0) return columnIdx\n                x0 += this.parameters.hMargin\n            }\n            return null\n        }\n        else {\n            for (let columnIdx = -1; columnIdx >= minColumnIdx; --columnIdx) {\n                x0 -= this.columnWidth.get(columnIdx) as number\n                if (xp > x0) return columnIdx\n                x0 -= this.parameters.hMargin\n            }\n            return null\n        }\n    }\n\n\n}","import { DiagramBlock } from \"./DiagramBlock\";\nimport { observable, action, autorun, toJS } from \"mobx\";\nimport { DiagramButtonLayout } from \"../layout/DiagramButtonLayout\";\nimport { DiagramButton } from \"./DiagramButton\";\nimport { DiagramConnection } from \"./DiagramConnection\";\nimport { DiagramStructure } from \"./DiagramStructure\";\nimport { DiagramSlotLayout } from \"../layout/DiagramSlotLayout\";\nimport { DiagramConnectionLayout } from \"../layout/DiagramConnectionLayout\";\nimport { DiagramBlockLayout } from \"../layout/DiagramBlockLayout\";\nimport { Vec2d } from \"./helpers\";\n\nexport class DiagramScene {\n    @observable diagramBlocks: DiagramBlock[]\n    @observable diagramConnections: DiagramConnection[]\n    @observable activeButtons: DiagramButton[] = []\n    @observable editedBlock?: DiagramBlock\n    @observable onEdit : boolean = false\n    @observable structureChanging : boolean = false\n    sceneTranslate: Vec2d = { x: 512, y: 500 }\n    @observable sceneTranslateDelta : Vec2d = {x : 0, y : 0}\n\n    diagramStructure: DiagramStructure\n\n    buttonLayout = new DiagramButtonLayout()\n    slotLayout: DiagramSlotLayout\n    blockLayout: DiagramBlockLayout\n    connectionLayout: DiagramConnectionLayout\n\n\n    constructor(diagramBlocks: DiagramBlock[] = [], diagramConnections: DiagramConnection[] = []) {\n        this.diagramBlocks = diagramBlocks\n        this.diagramConnections = diagramConnections\n        this.diagramStructure = new DiagramStructure(this)\n        this.slotLayout = new DiagramSlotLayout(this.diagramStructure)\n        this.blockLayout = new DiagramBlockLayout(this.diagramStructure)\n        this.connectionLayout = new DiagramConnectionLayout(this.diagramStructure)\n\n        autorun(() => {\n            let changed = false\n            for (let block of this.diagramBlocks) {\n                if (block.requestedWidth && block.finishedResizing && (block.rect.width != block.requestedWidth)) {\n                    block.rect.width = block.requestedWidth\n                    changed = true\n                }\n            }\n            if (changed) this.layout()\n        }, { name: \"asd\" })\n    }\n\n\n\n    showBlockButtons(block: DiagramBlock, buttons: DiagramButton[]) {\n        //setting button positions\n        this.buttonLayout.layoutBlockButtons(block, buttons)\n        this.activeButtons = buttons\n        for (let button of buttons) { button.on(\"click\", () => { this.activeButtons = [] }) }\n    }\n\n    @action layout() {\n        if (this.diagramBlocks.length > 0) {\n            //console.log(\"layout\")\n            this.slotLayout.layout()\n            this.blockLayout.layout()\n            this.connectionLayout.layout()\n        }\n\n    }\n}","import { Vec2d, Rect } from \"./helpers\";\nimport { observable, action, computed } from \"mobx\"\nimport { DiagramConnection } from \"./DiagramConnection\";\nimport { DiagramSlot } from \"./DiagramSlot\";\n\ntype BlockEvents = \"click\" | \"doubleClick\"| \"dragStart\" | \"dragEnd\" |\n    \"dropBlock\" | \"dropConnection\" |\n    \"overMouse\" | \"overDragBlock\" | \"overDragConnection\" |\n    \"selected\" | \"changeName\" | \"changeRect\";\n\ntype BlockCallback = (block: DiagramBlock) => void\ntype BlockPositionCallback = (block: DiagramBlock, position: Vec2d) => void\ntype ConnectionCallback = (connection: DiagramConnection) => void\n\nclass DiagramBlockCallbacks {\n    clickCallbacks: BlockCallback[] = []\n    doubleClickCallbacks : BlockCallback[] =[] \n    changeRectCallbacks: BlockCallback[] = []\n    dragEndCallbacks: BlockPositionCallback[] = []\n    on(evt: BlockEvents, callback: BlockCallback | ConnectionCallback | BlockPositionCallback) {\n        switch (evt) {\n            case \"click\":\n                this.clickCallbacks.push(callback as BlockCallback)\n                break\n            case \"doubleClick\":\n                this.doubleClickCallbacks.push(callback as BlockCallback)\n                break\n\n            case \"changeRect\":\n                this.changeRectCallbacks.push(callback as BlockCallback)\n                break\n\n            case \"dragEnd\":\n                this.dragEndCallbacks.push(callback as BlockPositionCallback)\n\n        }\n    }\n\n    protected fireClick(block: DiagramBlock) {\n        for (let callback of this.clickCallbacks) callback(block)\n    }\n\n\n    protected fireDoubleClick(block: DiagramBlock) {\n        for (let callback of this.doubleClickCallbacks) callback(block)\n    }\n\n\n    protected fireChangeRect(block: DiagramBlock) {\n        for (let callback of this.changeRectCallbacks) callback(block)\n    }\n\n    protected fireDragEnd(block: DiagramBlock, position: Vec2d) {\n        for (let callback of this.dragEndCallbacks) callback(block, position)\n    }\n\n}\n\nexport class DiagramBlock extends DiagramBlockCallbacks {\n    uid: string\n    @observable name: string\n    type: string\n    @observable rect: Rect\n    @observable translate: Vec2d\n    @observable slots: DiagramSlot[]\n    @observable debugIdx: number\n    @observable finishedResizing : boolean = true\n    @observable requestedWidth ?: number \n    @observable isEdited  = false\n\n    constructor(uid: string, name: string, type: string, slots: DiagramSlot[], rect: Rect) {\n        super()\n        this.uid = uid\n        this.name = name\n        this.type = type\n        this.slots = slots\n        this.rect = rect\n        this.debugIdx = 0\n        this.translate = { x: 0, y: 0 }\n    }\n\n    @action setPosition(position: Vec2d) {\n        this.translate = { x: 0, y: 0 }\n        this.rect = { ...this.rect, ...position }\n        this.fireChangeRect(this)\n    }\n\n    click() { this.fireClick(this) }\n    doubleClick() { this.fireDoubleClick(this) }\n\n    dragEnd(position: Vec2d) { this.fireDragEnd(this, position) }\n\n\n    @computed get name2slot(): Map<string, DiagramSlot> {\n        let name2slot = new Map<string, DiagramSlot>()\n        for (let slot of this.slots) name2slot.set(slot.name, slot)\n        return name2slot\n    }\n\n}\n","import { Vec2d } from \"./helpers\";\n\nexport type DiagramButtonPositionHint = \"topLeft\" | \"topRight\" |\n    \"rightTop\" | \"rightBottom\" |\n    \"bottomLeft\" | \"bottomRight\" |\n    \"leftTop\" | \"leftBottom\"\n\nexport type ButtonIcon  = \"add\" | \"remove\"\n\nexport class DiagramButton {\n    position: Vec2d = { x: 0, y: 0 }\n\n    protected clickCallbacks: (() => void)[] = []\n    \n    constructor(public uid: string, public positionHint: DiagramButtonPositionHint, public icon: ButtonIcon, public color: string, callback?: () => void, ) {\n        if (callback) this.on(\"click\", callback)\n    }\n\n    click() { \n        for (let callback of this.clickCallbacks) callback()    \n    }\n    \n    on(evt: \"click\", callback: () => void) { this.clickCallbacks.push(callback) }\n}","import { DiagramEndpoint } from \"./DiagramEndpoint\";\nimport { Vec2d } from \"./helpers\";\nimport { observable } from \"mobx\";\n\nexport class DiagramConnection {\n    @observable fromPoint : Vec2d  \n    @observable toPoint : Vec2d\n    constructor(public from: DiagramEndpoint, public to: DiagramEndpoint, public type: string) { \n        this.fromPoint = {x : 0, y : 0}\n        this.toPoint = {x : 0, y : 0}\n    }\n\n    get uid() {\n        return `${this.from.blockUid}:${this.from.slot}:${this.to.blockUid}:${this.to.slot}`\n    }\n}\n\n","import { Vec2d } from \"./helpers\";\nimport { observable } from \"mobx\";\n\nexport class DiagramSlot {\n    @observable position: Vec2d\n    constructor(public name: string, public type: string, position: Vec2d = { x: 0, y: 0 }) { this.position = position }\n\n    get key() {\n        return this.name\n    }\n}\n","import { DiagramScene } from \"../state/DiagramScene\";\nimport { DiagramBlock } from \"../state/DiagramBlock\";\nimport { DiagramSlot } from \"../state/DiagramSlot\";\nimport { uuidv4 } from \"../state/helpers\";\nimport { DiagramConnection } from \"../state/DiagramConnection\";\n\n\ninterface DiagramBlockJSON {\n    name: string,\n    children?: DiagramBlockJSON[]\n}\n\nexport interface DiagramSceneJSON {\n    root: {\n        name: string,\n        children?: {\n            left?: DiagramBlockJSON[],\n            right?: DiagramBlockJSON[]\n        }\n    }\n}\n\nexport class DiagramConvert {\n    static fromJSON(json: DiagramSceneJSON): DiagramScene {\n        let scene = new DiagramScene()\n        let rootBlock = new DiagramBlock(uuidv4(), json.root.name, \"mmroot\", [new DiagramSlot(\"ol\", \"o\"), new DiagramSlot(\"or\", \"o\")], { x: 100, y: 100, width: 200, height: 30 })\n\n        scene.diagramBlocks.push(rootBlock)\n        if (json.root.children && json.root.children.left) {\n            this.addChildBlocksFromJson(json.root.children.left, scene, rootBlock, true)\n        }\n        if (json.root.children && json.root.children.right) {\n            this.addChildBlocksFromJson(json.root.children.right, scene, rootBlock, false)\n        }\n\n        return scene\n    }\n\n    static addChildBlocksFromJson(jsonBlocks: DiagramBlockJSON[], scene: DiagramScene, parentBlock: DiagramBlock, left?: boolean) {\n        for (let jsonBlock of jsonBlocks) {\n            let block = new DiagramBlock(uuidv4(), jsonBlock.name, \"mm\", [new DiagramSlot(\"i\", \"i\"), new DiagramSlot(\"o\", \"o\")], { x: 100, y: 100, width: 200, height: 30 })\n            scene.diagramBlocks.push(block)\n            if (parentBlock.type == \"mmroot\") {\n                if (left) scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: 'ol' }, { blockUid: block.uid, slot: \"i\" }, \"mm\"))\n                else scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: 'or' }, { blockUid: block.uid, slot: \"i\" }, \"mm\"))\n            } else {\n                scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: 'o' }, { blockUid: block.uid, slot: \"i\" }, \"mm\"))\n            }\n\n            if (jsonBlock.children)\n                this.addChildBlocksFromJson(jsonBlock.children, scene, block)\n\n        }\n\n    }\n\n    static toJSON(scene: DiagramScene): DiagramSceneJSON {\n        let rootBlock = scene.diagramBlocks[0]\n        let result: DiagramSceneJSON = {\n            root: { name: rootBlock.name }\n        }\n        let leftConnections = scene.diagramStructure.getOutputSlotConnections(rootBlock.uid, \"ol\")\n        if (leftConnections.length > 0) {\n            result.root.children = { left: this.addChildBlocksFromScene(leftConnections, scene) }\n        }\n        let rightConnections = scene.diagramStructure.getOutputSlotConnections(rootBlock.uid, \"or\")\n        if (rightConnections.length > 0) {\n            if (result.root.children) result.root.children.right = this.addChildBlocksFromScene(rightConnections, scene)\n            else result.root.children = { right: this.addChildBlocksFromScene(rightConnections, scene) }\n        }\n        return result\n    }\n\n    static addChildBlocksFromScene(connections: DiagramConnection[], scene: DiagramScene): DiagramBlockJSON[] {\n        let res: DiagramBlockJSON[] = []\n        for (let connection of connections) {\n            let block = scene.diagramStructure.blocks.get(connection.to.blockUid) as DiagramBlock;\n            let newBlock: DiagramBlockJSON = { name: block.name }\n            let connections = scene.diagramStructure.getOutputSlotConnections(block.uid, \"o\")\n            if (connections.length > 0) {\n                newBlock.children = this.addChildBlocksFromScene(connections, scene)\n            }\n            res.push(newBlock)\n        }\n        return res\n\n    }\n}","import React, { Component } from 'react';\nimport { DiagramScene } from '../state/DiagramScene';\nimport styled, { StyledComponent } from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { Rect } from '../state/helpers';\nimport { DiagramBlock } from '../state/DiagramBlock';\nimport { action } from 'mobx';\n\n\nconst EditPosition = styled.div<{ rect: Rect }>`\n    position:absolute;\n    left :${p => p.rect.x}px;\n    top : ${p => p.rect.y}px;\n    width : ${p => p.rect.width}px;\n    height : ${p => p.rect.height}px;\n`\n\nconst MyInput = styled.input`\nwidth: 80%;\nheight: 60%;\nmargin-left: 7%;\nmargin-top:3px;\n`\n\n@observer\nclass MyComponent extends React.Component<{ block: DiagramBlock, onKeyDown: (evt: React.KeyboardEvent<HTMLInputElement>) => void }> {\n\n    private myRef = React.createRef<HTMLInputElement>()\n    \n    constructor(props: any) {\n        super(props)\n    }\n\n    componentDidMount() {\n        this.props.block.finishedResizing = false\n        if (this.myRef.current) {\n            this.myRef.current.focus()\n            this.myRef.current.setSelectionRange(0,this.props.block.name.length)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.block.finishedResizing = true\n    }\n\n    render() {\n        \n        return (<MyInput ref={this.myRef} type=\"text\" value={this.props.block.name} onChange={evt => { this.props.block.name = evt.target.value; }} onKeyDown={this.props.onKeyDown} />)\n    }\n}\n\n@observer\nexport class DiagramEditComponent extends React.Component<{ scene: DiagramScene }> {\n\n    render() {\n        if (this.props.scene.editedBlock) {\n            let rect = { ...this.props.scene.editedBlock.rect }\n            rect.x += this.props.scene.sceneTranslate.x\n            rect.y += this.props.scene.sceneTranslate.y\n\n            return <EditPosition rect={rect}><MyComponent block={this.props.scene.editedBlock} onKeyDown={(evt) => this.handleKeyDown(evt)} /></EditPosition>\n        }\n        else {\n            return null\n        }\n\n    }\n    @action\n    private handleKeyDown(evt: React.KeyboardEvent<HTMLInputElement>) {\n        if ((this.props.scene.editedBlock) && (evt.key === \"Enter\")) {\n            this.props.scene.editedBlock.isEdited = false\n            this.props.scene.editedBlock = undefined\n            this.props.scene.onEdit = true\n            this.props.scene.activeButtons = []\n        }\n    }\n\n}","import React from 'react';\nimport styled from 'styled-components'\nimport { DiagramSceneComponent } from '../lib/component/DiagramSceneComponent';\nimport { DiagramScene } from '../lib/state/DiagramScene';\nimport { DiagramBlock } from '../lib/state/DiagramBlock';\nimport { DiagramButton, ButtonIcon } from '../lib/state/DiagramButton';\nimport { uuidv4, Vec2d, removeItems } from '../lib/state/helpers';\nimport { DiagramConnection } from '../lib/state/DiagramConnection';\nimport { DiagramSlot as Slot, DiagramSlot } from '../lib/state/DiagramSlot';\nimport { action, autorun, observable } from 'mobx';\nimport diagram from '../files/example1.json'\nimport { DiagramConvert, DiagramSceneJSON } from '../lib/convert/DiagramConvert';\nimport { logMindMap, mindMapDragLog } from '../logging/Config';\nimport { DiagramEditComponent } from '../lib/component/DiagramEditComponent';\nimport { observer } from 'mobx-react';\n\nconst MM = styled.div`\n    position:absolute;\n    width : 100%;\n    height : 100%;\n`\n\n\n\n\n@observer\nexport class MindMapComponent extends React.Component<{ vscode?: any, jsonDiagram?: DiagramSceneJSON }>{\n    @observable diagramScene: DiagramScene\n\n    vscode?: any\n\n\n    constructor(props: any) {\n        super(props)\n        this.vscode = this.props.vscode\n        //if (this.props.jsonDiagram) {\n        if (false) {\n            //this.diagramScene = DiagramConvert.fromJSON(this.props.jsonDiagram)\n        } else {\n            this.diagramScene = new DiagramScene()\n            let rootBlock = new DiagramBlock(uuidv4(), \"Enter diagram name\", \"mmroot\", [new DiagramSlot(\"ol\", \"o\"), new DiagramSlot(\"or\", \"o\")], { x: 0, y: 0, width: 100, height: 30 })\n            this.diagramScene.diagramBlocks.push(rootBlock)\n\n        }\n\n        this.addCallbacks(this.diagramScene.diagramBlocks);\n        this.diagramScene.layout()\n        window.addEventListener('message', event => {\n            const message = event.data; // The JSON data our extension sent\n            if (message.command === \"setJsonDocument\") {\n                logMindMap.info(\"setJsonDocument\", message.document)\n                let doc: DiagramSceneJSON = message.document\n                this.vscode.setState(doc)\n                this.diagramScene = DiagramConvert.fromJSON(doc)\n                this.diagramScene.layout()\n                this.addCallbacks(this.diagramScene.diagramBlocks);\n            }\n        });\n\n        autorun(() => {\n            if (this.diagramScene.onEdit && this.vscode && !this.diagramScene.editedBlock) {\n                let jsonDiagram = DiagramConvert.toJSON(this.diagramScene)\n\n                this.vscode.postMessage({ message: \"setDocument\", document: jsonDiagram })\n                this.vscode.setState(jsonDiagram)\n                this.diagramScene.onEdit = false\n            }\n        })\n    }\n\n    private addCallbacks(blocks: DiagramBlock[]) {\n        for (let block of blocks) {\n            block.on(\"click\", (block: DiagramBlock) => {\n                let addButton = new DiagramButton(\"addB\", \"topRight\", \"add\", \"red\", () => {\n                    this.addBlock(block);\n                });\n\n                let removeButton = new DiagramButton(\"removeB\", \"topRight\", \"remove\", \"red\", () => {\n                    this.removeBlock(block);\n                });\n\n                this.diagramScene.showBlockButtons(block, [addButton, removeButton]);\n            });\n            block.on(\"dragEnd\", (block: DiagramBlock, position: Vec2d) => {\n                logMindMap.info(`Block drag end '${block.name}' (${position.x},${position.y})`)\n                this.endDragging(block, position);\n                this.diagramScene.layout();\n\n            });\n            block.on(\"doubleClick\", (block: DiagramBlock) => {\n                block.isEdited = true\n                logMindMap.info(`Block double click ${block.uid}`);\n                this.diagramScene.editedBlock = block;\n                this.diagramScene.activeButtons =[]\n            });\n        }\n    }\n\n    componentDidMount() {\n        if (this.vscode)\n            this.vscode.postMessage({ message: \"getDocument\" })\n        else {\n            setTimeout(() => {\n                let diagramScene = new DiagramScene()\n                let rootBlock = new DiagramBlock(uuidv4(), \"Enter diagram name\", \"mmroot\", [new DiagramSlot(\"ol\", \"o\"), new DiagramSlot(\"or\", \"o\")], { x: 0, y: 0, width: 100, height: 30 })\n                diagramScene.diagramBlocks.push(rootBlock)\n                this.diagramScene = diagramScene\n                console.log(\"New diagram scene\")\n                this.addCallbacks(this.diagramScene.diagramBlocks)\n                this.diagramScene.layout()\n\n            }, 500)\n\n\n        }\n    }\n\n    render() {\n        return <MM>\n\n            <DiagramEditComponent scene={this.diagramScene}></DiagramEditComponent>\n            <DiagramSceneComponent diagramScene={this.diagramScene}></DiagramSceneComponent>\n        </MM>\n    }\n\n    @action\n    removeBlock(block: DiagramBlock) {\n        if (block.type === \"mmroot\") return;\n        logMindMap.info(`removeBlock ${block.name}`)\n        let childBlocks = this.diagramScene.diagramStructure.getChildBlocks(block.uid).map(uid => this.diagramScene.diagramStructure.blocks.get(uid) as DiagramBlock)\n        childBlocks.push(block)\n        let connections: DiagramConnection[] = []\n        for (let block of childBlocks) {\n            connections.push(this.diagramScene.diagramStructure.blockConnections.input.get(block.uid)[0] as DiagramConnection)\n\n        }\n\n        for (let block of childBlocks) {\n            let idx = this.diagramScene.diagramBlocks.indexOf(block)\n            this.diagramScene.diagramBlocks.splice(idx, 1)\n        }\n\n        for (let connection of connections) {\n            let idx = this.diagramScene.diagramConnections.indexOf(connection)\n            this.diagramScene.diagramConnections.splice(idx, 1)\n\n        }\n        this.diagramScene.layout()\n        this.diagramScene.onEdit = true;\n\n        console.log(this.diagramScene.diagramBlocks.length, this.diagramScene.diagramConnections.length)\n    }\n\n    @action\n    addBlock(parentBlock: DiagramBlock) {\n        logMindMap.info(`addBlock (parent=${parentBlock.name})`)\n        let block = new DiagramBlock(uuidv4(), \"Unnamed element\", \"mm\", [new Slot(\"i\", \"i\"), new Slot(\"o\", \"o\")], { x: 50, y: 10, width: 100, height: 30 })\n        this.addCallbacks([block])\n\n        let newConnection: DiagramConnection\n        if (parentBlock.type === \"mmroot\") {\n            newConnection = new DiagramConnection({ blockUid: parentBlock.uid, slot: \"or\" }, { blockUid: block.uid, slot: \"i\" }, \"mm\")\n        }\n        else {\n            newConnection = new DiagramConnection({ blockUid: parentBlock.uid, slot: \"o\" }, { blockUid: block.uid, slot: \"i\" }, \"mm\")\n        }\n        this.diagramScene.diagramBlocks.push(block)\n        this.diagramScene.diagramConnections.push(newConnection)\n         \n        this.diagramScene.layout()\n        this.diagramScene.editedBlock = block\n        this.diagramScene.editedBlock.isEdited = true\n        this.diagramScene.onEdit = true\n\n    }\n    @action\n    endDragging(block: DiagramBlock, dragPosition: Vec2d) {\n        logMindMap.info(`endDragging ${block.name} : (${dragPosition.x}, ${dragPosition.y})`)\n        if (block.type === \"mmroot\") return;\n        let layout = this.diagramScene.blockLayout\n        let scene = this.diagramScene\n        let structure = scene.diagramStructure\n        let childBlocks = this.diagramScene.diagramStructure.getChildBlocks(block.uid).map(uid => this.diagramScene.diagramStructure.blocks.get(uid) as DiagramBlock)\n        let occupiedBlocks = layout.getBlocks(dragPosition)\n        occupiedBlocks = removeItems(occupiedBlocks, block, ...childBlocks)\n        mindMapDragLog.info(`found N occupied blocks ${occupiedBlocks.length}`)\n        if (occupiedBlocks.length > 0) {\n            let parentBlock = occupiedBlocks[0]\n\n            let blockUids = [block.uid].concat(structure.getChildBlocks(block.uid))\n            let blocks = blockUids.map(blockUid => structure.blocks.get(blockUid) as DiagramBlock)\n            this.diagramScene.diagramConnections = removeItems(scene.diagramConnections, structure.blockConnections.input.get(block.uid)[0])\n\n            this.diagramScene.diagramBlocks = removeItems(this.diagramScene.diagramBlocks, ...blocks)\n\n            //let parentBlock = this.diagramData.getBlock(parentBlockUid)\n            let parentBlockIdx = scene.diagramBlocks.indexOf(parentBlock)\n\n            scene.diagramBlocks.splice(parentBlockIdx + 1, 0, ...blocks)\n            if (parentBlock.type === \"mmroot\") {\n                if (dragPosition.x > 0)\n                    scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: \"or\" }, { blockUid: blockUids[0], slot: \"i\" }, \"mm\"))\n                else\n                    scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: \"ol\" }, { blockUid: blockUids[0], slot: \"i\" }, \"mm\"))\n            } else\n                scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: \"o\" }, { blockUid: blockUids[0], slot: \"i\" }, \"mm\"))\n            scene.layout()\n\n            this.diagramScene.onEdit = true;\n\n            //layout.layout()\n        } else {\n\n            let blockColumn = layout.getBlockColumn(block.uid)\n            let positionColumn = layout.getColumnIdx(dragPosition.x)\n            mindMapDragLog.info(`Block column ${blockColumn}, position column ${positionColumn}`)\n            if (positionColumn === blockColumn) {\n                let connection = structure.blockConnections.input.get(block.uid)[0]\n                let [idx, blockIdxs] = layout.getChildIdx(block.uid, connection.from.blockUid, dragPosition.y)\n                mindMapDragLog.info(`Child idx ${blockIdxs}[${idx}]`)\n                if (blockIdxs.length > 0) {\n                    let newIdx = -1;\n                    let nextBlock: DiagramBlock | null = null\n                    if (idx === blockIdxs.length) {\n                    } else {\n                        newIdx = blockIdxs[idx]\n                        nextBlock = scene.diagramBlocks[newIdx]\n                    }\n\n                    let blockUids = [block.uid].concat(structure.getChildBlocks(block.uid))\n                    let blocks = blockUids.map(blockUid => structure.blocks.get(blockUid) as DiagramBlock)\n\n                    scene.diagramBlocks = removeItems(scene.diagramBlocks, ...blocks)\n\n                    if (nextBlock) {\n                        let nextConnection = scene.diagramStructure.blockConnections.input.get(nextBlock.uid)[0]\n                        let nextConnectionIdx = scene.diagramConnections.indexOf(nextConnection)\n                        let cidx = this.diagramScene.diagramConnections.indexOf(connection)\n                        this.diagramScene.diagramConnections.splice(cidx, 1)\n                        this.diagramScene.diagramConnections.splice(nextConnectionIdx - 1, 0, connection)\n\n                        let idx = scene.diagramBlocks.indexOf(nextBlock)\n                        scene.diagramBlocks.splice(idx, 0, ...blocks)\n                    }\n                    else {\n                        scene.diagramBlocks.push(...blocks)\n                        let cidx = this.diagramScene.diagramConnections.indexOf(connection)\n                        this.diagramScene.diagramConnections.splice(cidx, 1)\n                        this.diagramScene.diagramConnections.push(connection)\n\n                    }\n\n\n                }\n\n                scene.layout()\n                this.diagramScene.onEdit = true;\n\n\n            }\n            else {\n                let inputConnections = structure.blockConnections.input.get(block.uid)\n                let inputBlock = structure.blocks.get(inputConnections[0].from.blockUid) as DiagramBlock\n                if (inputBlock.type === \"mmroot\") {\n                    if (dragPosition.x > 0) {\n                        inputConnections[0].from.slot = \"or\"\n                    } else {\n                        inputConnections[0].from.slot = \"ol\"\n                    }\n                }\n                scene.layout()\n                this.diagramScene.onEdit = true;\n\n            }\n        }\n\n    }\n\n}","import React from 'react';\nimport './App.css';\nimport { MindMapComponent } from './components/MindMapComponent';\nimport { DiagramConvert } from './lib/convert/DiagramConvert';\n\n\ndeclare var acquireVsCodeApi: any;\n\nconst App: React.FC = () => {\n  if (typeof acquireVsCodeApi !== 'undefined') {\n    let vscode = acquireVsCodeApi()\n    let jsonDiagram = vscode.getState()\n    return (\n      <MindMapComponent jsonDiagram={jsonDiagram} vscode={vscode} />\n    );\n  } else {\n    return (\n      <MindMapComponent />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}