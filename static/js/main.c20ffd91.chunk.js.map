{"version":3,"sources":["lib/component/DiagramSlotComponent.tsx","lib/component/DiagramBlockComponent.tsx","lib/state/helpers.ts","lib/component/buttons/AddButtonComponent.tsx","lib/component/buttons/RemoveButtonComponent.tsx","lib/component/DiagramButtonComponet.tsx","lib/component/DiagramConnectionComponent.tsx","logging/Config.ts","lib/component/DiagramSceneComponent.tsx","lib/state/DiagramBlock.ts","lib/state/DiagramButton.ts","lib/state/DiagramConnection.ts","lib/state/DiagramSlot.ts","lib/layout/DiagramButtonLayout.ts","lib/state/DiagramStructure.ts","lib/layout/DiagramSlotLayout.ts","lib/layout/DiagramConnectionLayout.ts","lib/layout/DiagramBlockLayout.ts","lib/state/DiagramScene.ts","lib/convert/DiagramConvert.ts","lib/component/DiagramEditComponent.tsx","components/MindMapComponent.tsx","lib/state/DiagramImage.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DiagramSlotComponent","observer","transform","this","props","slot","position","x","y","onClick","evt","r","fill","React","Component","BlockImageElement","myRef","createRef","current","rect","getBoundingClientRect","onSize","width","height","block","image","ref","xlinkHref","ScaledSvgText","console","log","name","getBBox","style","pointerEvents","userSelect","dominantBaseline","textAnchor","observable","DiagramBlockComponent","onTextSize","size","textSize","updateRequestedSize","onImageSize","imageSize","translate","onMouseDown","onDoubleClick","rx","isSelected","isHovered","type","isEdited","slots","map","key","requestedWidth","onSelect","clientX","clientY","stopPropagation","click","doubleClick","computed","Rect","p","other","MapList","Map","value","values","get","push","set","length","keys","uuidv4","replace","c","Math","random","toString","removeItems","array","elems","elem","index","indexOf","splice","distance","v","sqrt","AddButtonComponent","id","ry","stroke","strokeWidth","d","RemoveButtonComponent","DiagramButtonComponent","element","button","color","icon","DiagramConnectionComponent","x1","connection","fromPoint","y1","x2","toPoint","y2","CategoryServiceFactory","setDefaultConfiguration","CategoryConfiguration","LogLevel","Info","logMindMap","Category","mindMapDragLog","logDiagramBlockLayout","logDigramSceneComponent","DiagramSceneComponent","x0","y0","mouseDownPos","selectionBlock","dx","dy","diagramScene","sceneTranslate","left","top","sceneTranslateDelta","xmlns","xmlnsXlink","onMouseMove","onMouseUp","diagramBlocks","uid","selectedBlock","hoverBlock","editedBlock","pos","diagramConnections","activeButtons","clientToScene","setEditedBlock","undefined","info","onEdit","pageX","pageY","mousePos","contains","setPosition","dragEnd","client","action","DiagramBlock","debugIdx","fireChangeRect","fireClick","fireDoubleClick","fireDragEnd","name2slot","clickCallbacks","doubleClickCallbacks","changeRectCallbacks","dragEndCallbacks","callback","DiagramButton","positionHint","on","DiagramConnection","from","to","blockUid","DiagramSlot","DiagramButtonLayout","buttons","regionButtons","D","DiagramStructure","scene","blockConnections","output","filter","input","childBlocks","getChildBlocks","result","DiagramSlotLayout","diagramStructure","rootBlock","Error","rightChildBlocks","getOutputSlotConnections","rightBlocks","leftChildBlocks","leftBlocks","blocks","DiagramConnectionLayout","disposers","disposer","fromBlock","toBlock","autorun","setConnectionPosition","delay","fromPosition","toPosition","defaultMMLayoutParams","hMargin","vMargin","DiagramBlockLayout","parameters","blockColumns","columnBlocks","childShift","blockHeight","blockChildWidth","columnWidth","columnCenter","blockPosition","inputConnections","i","empty","inputBlockConnections","oldColumn","newColumn","layoutColumns","columns","Array","sort","a","b","firstColumn","lastColumn","column","maxWidth","max","width1","updateChildHeight","updateChildPositions","blockUids","parentPos","totalHeight","childBlockUids","outputConnections","childrenHeight","res","parentUid","uids","blockIdxs","data","blockIdx","idx","xp","maxColumnIdx","minColumnIdx","min","columnIdx","DiagramScene","buttonLayout","slotLayout","blockLayout","connectionLayout","oldEditedBlock","changed","finishedEditing","layout","_editedBlock","layoutBlockButtons","DiagramConvert","json","root","children","addChildBlocksFromJson","right","jsonBlocks","parentBlock","jsonBlock","leftConnections","addChildBlocksFromScene","rightConnections","connections","newBlock","EditPosition","styled","div","MyInput","MyComponent","focusOut","handleBlur","e","currentTarget","relatedTarget","target","focus","setSelectionRange","onFocus","onBlur","onChange","onKeyDown","DiagramEditComponent","copy","handleKeyDown","MM","MindMapComponent","vscode","addCallbacks","window","addEventListener","event","message","command","document","doc","setState","fromJSON","addBlock","addSibling","removeBlock","jsonDiagram","toJSON","postMessage","addButton","removeButton","showBlockButtons","endDragging","newConnection","Slot","dragPosition","structure","inputBlock","occupiedBlocks","getBlocks","concat","parentBlockIdx","getChildIdx","newIdx","nextBlock","nextConnection","nextConnectionIdx","cidx","DiagramImage","App","acquireVsCodeApi","getState","files","fr","FileReader","onload","newImage","readAsDataURL","setImageUrl","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c20ffd91.chunk.js","sourcesContent":["import React from 'react';\nimport { DiagramSlot } from '../state/DiagramSlot';\nimport { observer } from 'mobx-react';\n\n@observer\nexport class DiagramSlotComponent extends React.Component<{ slot: DiagramSlot }> {\n    render() {\n        return <g transform={`translate(${this.props.slot.position.x},${this.props.slot.position.y}) rotate(0)`} onClick={evt => this.onClick(evt)} >\n            <circle r=\"3\" fill=\"gray\" />\n        </g>\n    }\n\n    onClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        //this.props.button.click()\n    }\n\n}","import React from 'react';\nimport { DiagramBlock } from '../state/DiagramBlock';\nimport { observer } from 'mobx-react'\nimport { DiagramSlotComponent } from './DiagramSlotComponent';\nimport { Vec2d } from '../state/helpers';\nimport { autorun, observable, computed } from 'mobx';\n\n\n@observer\nclass BlockImageElement extends React.Component<{ block: DiagramBlock, onSize: (size: Vec2d) => void }> {\n    private myRef = React.createRef<SVGImageElement>()\n\n\n    componentDidMount() {\n        if (this.myRef.current) {\n            let rect = this.myRef.current.getBoundingClientRect()\n            this.props.onSize({ x: rect.width, y: rect.height })\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.myRef.current) {\n            let rect = this.myRef.current.getBoundingClientRect()\n\n            this.props.onSize({ x: rect.width, y: rect.height })\n        }\n    }\n\n    render() {\n        return (this.props.block.image ? <image width=\"100\" ref={this.myRef} xlinkHref={this.props.block.image.image} /> : null)\n    }\n}\n\n\n@observer\nclass ScaledSvgText extends React.Component<{ block: DiagramBlock, onSize: (size: Vec2d) => void }> {\n    @observable size: Vec2d = { x: 0, y: 0 }\n    private myRef = React.createRef<SVGTextElement>()\n    constructor(props: any) {\n        super(props)\n\n    }\n\n\n    componentDidMount() {\n        console.log(\"DID mount\", this.props.block.name)\n        if (this.myRef.current) {\n            this.props.onSize({ x: this.myRef.current.getBBox().width, y: this.myRef.current.getBBox().height })\n\n            //this.props.block.requestedWidth = this.myRef.current.getBBox().width + 20\n        }\n    }\n\n    render() {\n        return <text ref={this.myRef} style={{ pointerEvents: \"none\", userSelect: \"none\" }} x={this.props.block.rect.width / 2} y={this.props.block.rect.height / 2} dominantBaseline=\"middle\" textAnchor=\"middle\">{this.props.block.name}</text>\n\n    }\n}\n\n@observer\nexport class DiagramBlockComponent extends React.Component<{ block: DiagramBlock, isEdited: boolean, isSelected: boolean, isHovered: boolean, onSelect: (block: DiagramBlock, pos: Vec2d) => void }, {}> {\n    constructor(props: any) {\n        super(props)\n    }\n\n    @observable imageSize: Vec2d = { x: 0, y: 0 }\n\n    @observable textSize: Vec2d = { x: 0, y: 0 }\n    render() {\n\n\n        //{!(this.props.block.type===\"mmroot\"?:null)}\n        return  <g transform={`translate(${this.props.block.rect.x + this.props.block.translate.x},${this.props.block.rect.y + this.props.block.translate.y}) rotate(0)`} onMouseDown={evt => this.onMouseDown(evt)} onClick={evt => this.onClick(evt)} onDoubleClick={evt => this.onDoubleClick(evt)}>\n                <rect width={this.props.block.rect.width} height={this.props.block.rect.height} fill=\"white\" style={{ \"stroke\": \"#006600\" }} rx={5} />\n            {this.props.isSelected && <rect x={-3} y={-3} width={this.props.block.rect.width + 6} height={this.props.block.rect.height + 6} fill=\"none\" style={{ \"stroke\": \"#0000FF\", \"strokeWidth\": 2 }} rx={5} />}\n            {this.props.isHovered && <rect x={-3} y={-3} width={this.props.block.rect.width + 6} height={this.props.block.rect.height + 6} fill=\"none\" style={{ \"stroke\": \"#00FF00\", \"strokeWidth\": 2 }} rx={5} />}\n\n\n            {this.props.block.type === \"mmroot\" ? <rect x=\"3\" y=\"3\" width={this.props.block.rect.width - 6} height={this.props.block.rect.height - 6} fill=\"white\" style={{ \"stroke\": \"#006600\" }} rx={5} /> : null}\n            {!this.props.isEdited ? <ScaledSvgText block={this.props.block} onSize={this.onTextSize} /> : null\n            }\n            <BlockImageElement block={this.props.block} onSize={this.onImageSize} />\n            {this.props.block.slots.map(slot => <DiagramSlotComponent key={slot.key} slot={slot} />)}\n        </g>\n    }\n    onTextSize = (size: Vec2d) => {\n        this.textSize = size\n        this.updateRequestedSize()\n    }\n    onImageSize = (size: Vec2d) => {\n        this.imageSize = size\n        this.updateRequestedSize()\n    }\n\n\n    updateRequestedSize() {\n        this.props.block.requestedWidth = this.textSize.x + 20\n\n    }\n\n    @computed get fullSize(): Vec2d {\n        return this.textSize\n    }\n\n\n\n    onMouseDown(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n\n        this.props.onSelect(this.props.block, { x: evt.clientX, y: evt.clientY })\n        evt.stopPropagation()\n    }\n\n    onClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        this.props.block.click()\n        evt.stopPropagation()\n    }\n\n    onDoubleClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        this.props.block.doubleClick()\n    }\n\n}","import { func } from \"prop-types\"\nimport { observable } from \"mobx\"\n\nexport interface Vec2d { x: number, y: number }\n\nexport class Rect {\n    @observable x: number\n    @observable y: number\n    @observable width: number\n    @observable height: number\n\n    constructor(x: number, y: number, width: number, height: number) {\n        this.x = x\n        this.y = y\n        this.width = width\n        this.height = height\n    }\n\n    contains (p : Vec2d) :boolean {\n        if (p.x < this.x || p.x > this.x + this.width || p.y < this.y || p.y > this.y + this.height) return false\n        return true\n    }\n\n    static copy(other : Rect) {\n        return new Rect(other.x, other.y, other.width, other.height)\n    }\n}\n\nexport class MapList<Key, Value> {\n    map: Map<Key, Value[]> = new Map()\n\n    push(key: Key, value: Value) {\n        let values = this.map.get(key) || []\n        values.push(value)\n        this.map.set(key, values)\n    }\n\n    get(key: Key) {\n        return this.map.get(key) || []\n    }\n\n    empty(key: Key) {\n        return this.get(key).length === 0\n    }\n\n    keys() {\n        return this.map.keys()\n\n    }\n}\n\nexport function uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\n        return v.toString(16);\n    });\n}\n\nexport function removeItems<T>(array: Array<T>, ...elems: T[]): Array<T> {\n    for (let elem of elems) {\n        let index = array.indexOf(elem)\n        if (index !== -1) {\n            array.splice(index, 1)\n        }\n    }\n    return array\n}\n\nexport function distance(v: Vec2d) {\n    return Math.sqrt(v.x * v.x + v.y * v.y)\n}","import React from 'react';\nimport { DiagramButton } from '../../state/DiagramButton';\n\nexport class AddButtonComponent extends React.Component {\n    render() {\n        return <g  >\n\n<g\n       id=\"g3979\"\n       transform=\"translate(-0.10620686,-0.56696429)\">\n      <rect\n         ry=\"1.0444876\"\n         y=\"-9.3742828\"\n         x=\"-9.8492556\"\n         height=\"19.63636\"\n         width=\"19.425177\"\n         id=\"rect3942\"\n         style={{fill:\"white\",stroke:\"#000000\",strokeWidth:\"1\"}} \n         />\n      <path\n         id=\"rect3944\"\n         d=\"m -3.3174074,-7.0890472 c -0.5786464,0 -1.0443792,0.4657354 -1.0443792,1.0443818 v 2.1626565 h -2.1626592 c -0.5786464,0 -1.0443818,0.4657355 -1.0443818,1.0443819 v 6.7313729 c 0,0.5786438 0.4657354,1.0443792 1.0443818,1.0443792 h 2.1626592 v 2.1626592 c 0,0.5786464 0.4657328,1.0443792 1.0443792,1.0443792 h 6.7313729 c 0.5786464,0 1.0443819,-0.4657328 1.0443819,-1.0443792 V 4.9381251 h 2.1626565 c 0.5786464,0 1.0443818,-0.4657354 1.0443818,-1.0443792 V -2.837627 c 0,-0.5786464 -0.4657354,-1.0443819 -1.0443818,-1.0443819 H 4.4583474 v -2.1626565 c 0,-0.5786464 -0.4657355,-1.0443818 -1.0443819,-1.0443818 z\"\n         style={{fill:\"purple\",stroke:\"#000000\",strokeWidth:\"1\"}} \n\n         />\n    </g>\n            \n\n        </g >\n    }\n\n}","import React from 'react';\nimport { DiagramButton } from '../../state/DiagramButton';\n\nexport class RemoveButtonComponent extends React.Component {\n    render() {\n        return <g  >\n\n            <g\n                id=\"g3979\"\n                transform=\"translate(-0.10620686,-0.56696429)\">\n                <rect\n                    ry=\"1.0444876\"\n                    y=\"-9.3742828\"\n                    x=\"-9.8492556\"\n                    height=\"19.63636\"\n                    width=\"19.425177\"\n                    id=\"rect3942\"\n                    style={{ fill: \"white\", stroke: \"#000000\", strokeWidth: \"1\" }}\n                />\n                <rect\n                    style={{ fill: \"white\", stroke: \"#000000\", strokeWidth: \"1\" }}\n\n                    id=\"rect4021\"\n                    width=\"15.485204\"\n                    height=\"8.2242823\"\n                    x=\"-7.7426019\"\n                    y=\"-4.1617403\"\n                    ry=\"0.98811853\" />\n            </g>\n\n\n        </g >\n    }\n\n}","import React from 'react';\nimport { DiagramButton } from '../state/DiagramButton';\nimport { AddButtonComponent } from './buttons/AddButtonComponent';\nimport { RemoveButtonComponent } from './buttons/RemoveButtonComponent';\n\nexport class DiagramButtonComponent extends React.Component<{ button: DiagramButton }> {\n    render() {\n        let element = <rect width={10} height={10} fill={this.props.button.color} ></rect>;\n        switch (this.props.button.icon) {\n            case \"add\":\n                element = <AddButtonComponent />\n                break;\n            case \"remove\":\n                element = <RemoveButtonComponent />\n                break;\n\n        }\n\n        return <g transform={`translate(${this.props.button.position.x},${this.props.button.position.y}) rotate(0)`} onClick={evt => this.onClick(evt)} >\n            {element}\n\n        </g>\n    }\n\n    onClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        \n        this.props.button.click()\n    }\n\n}","import React from 'react';\nimport { DiagramConnection } from '../state/DiagramConnection';\nimport { observer } from 'mobx-react';\n\n@observer\nexport class DiagramConnectionComponent extends React.Component<{ connection: DiagramConnection }> {\n\n    render() {\n        const x1 = this.props.connection.fromPoint.x;\n        const y1 = this.props.connection.fromPoint.y;\n        const x2 = this.props.connection.toPoint.x;\n        const y2 = this.props.connection.toPoint.y;\n        const lineStyle = { stroke: \"rgb(255,0,0)\", strokeWidth: \"2\" ,fill:\"none\" };\n        //return <line style={lineStyle} x1={x1} y1={y1} x2={x2} y2={y2} />\n        return <path style={lineStyle} d={`M ${x1} ${y1} C ${x2} ${y1} ${x1} ${y2} ${x2} ${y2}`}/>\n    }\n\n}","import {Category,CategoryLogger,CategoryServiceFactory,CategoryConfiguration,LogLevel} from \"typescript-logging\";\n \n// Optionally change default settings, in this example set default logging to Info.\n// Without changing configuration, categories will log to Error.\nCategoryServiceFactory.setDefaultConfiguration(new CategoryConfiguration(LogLevel.Info));\n \n\n\n// Create categories, they will autoregister themselves, one category without parent (root) and a child category.\nexport const logMindMap = new Category(\"mindMap\");\nexport const mindMapDragLog = new Category(\"draging\", logMindMap);\nexport const logDiagramBlockLayout = new Category(\"diagramBlockLayout\", logMindMap);\n\nexport const logDigramSceneComponent = new Category(\"DiagramSceneComponent\");\n\n//export const catProdLog = new Category(\"product\", mindMapLog);","import React from 'react';\nimport { DiagramBlockComponent } from './DiagramBlockComponent';\nimport { DiagramBlock } from '../state/DiagramBlock';\nimport { DiagramScene } from '../state/DiagramScene';\nimport { observer } from 'mobx-react';\nimport { Vec2d, distance } from '../state/helpers';\nimport { DiagramButtonComponent } from './DiagramButtonComponet';\nimport { DiagramConnectionComponent } from './DiagramConnectionComponent';\nimport { observable, action } from 'mobx';\nimport { logDigramSceneComponent } from '../../logging/Config';\n\n\n@observer\nexport class DiagramSceneComponent extends React.Component<{ diagramScene: DiagramScene }, {}> {\n\n    x0 : number = 0\n    y0 : number = 0\n    mouseDownPos?: Vec2d\n    selectionBlock?: DiagramBlock\n    @observable hoverBlock? : DiagramBlock \n    private myRef = React.createRef<SVGSVGElement>()\n\n    componentDidMount() {\n        if (this.myRef.current) {\n            console.log(\"changing scene translaote\")\n            let dx = this.myRef.current.getBoundingClientRect().width / 2\n            let dy = this.myRef.current.getBoundingClientRect().height / 2\n            this.props.diagramScene.sceneTranslate.x = dx\n            this.props.diagramScene.sceneTranslate.y = dy\n            console.log(dx, dy)\n            this.x0 = this.myRef.current.getBoundingClientRect().left\n            this.y0 = this.myRef.current.getBoundingClientRect().top\n\n        }\n    }\n\n\n    render() {\n        let dx = this.props.diagramScene.sceneTranslate.x + this.props.diagramScene.sceneTranslateDelta.x\n        let dy = this.props.diagramScene.sceneTranslate.y + this.props.diagramScene.sceneTranslateDelta.y\n        return <svg\n            ref={this.myRef}\n            width=\"100%\"\n            height=\"100%\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            onMouseDown={evt => this.onMouseDown(evt)}\n            onMouseMove={evt => this.onMouseMove(evt)}\n            onMouseUp={evt => this.onMouseUp(evt)}\n            onClick={evt => this.onClick(evt)}\n\n        >\n\n            <g transform={`translate(${dx},${dy})`}>\n                {this.props.diagramScene.diagramBlocks.map(block =>\n                    <DiagramBlockComponent key={block.uid} block={block} isSelected={this.props.diagramScene.selectedBlock === block} isHovered={this.hoverBlock === block} isEdited={this.props.diagramScene.editedBlock === block} onSelect={(block, pos) => this.onSelect(block, pos)} />\n                )}\n                {this.props.diagramScene.diagramConnections.map(element =>\n                    <DiagramConnectionComponent key={element.uid} connection={element} />\n                )}\n\n\n                {this.props.diagramScene.activeButtons.map(button => <DiagramButtonComponent key={button.uid} button={button} />)}\n            </g>\n        </svg>\n\n    }\n\n\n    onSelect(block: DiagramBlock, pos: Vec2d) {\n        this.mouseDownPos = this.clientToScene(pos)\n        this.selectionBlock = block\n        this.props.diagramScene.selectedBlock = block\n        this.props.diagramScene.setEditedBlock(undefined)\n\n    }\n\n    @action\n    onMouseDown(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        logDigramSceneComponent.info(\"onMouseDown\")\n        if (this.props.diagramScene.editedBlock) {\n            this.props.diagramScene.setEditedBlock(undefined)\n            this.props.diagramScene.onEdit = true\n        }\n\n        this.mouseDownPos = this.clientToScene({ x: evt.pageX, y: evt.pageY })\n\n    }\n\n    @action\n    onMouseMove(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        if (this.mouseDownPos && this.selectionBlock) {\n            logDigramSceneComponent.info(\"onMouseMove block\")\n            let mousePos = this.clientToScene({ x: evt.pageX, y: evt.pageY })\n            this.selectionBlock.translate = { x: mousePos.x - this.mouseDownPos.x, y: mousePos.y - this.mouseDownPos.y }\n            this.props.diagramScene.activeButtons = []\n\n            this.hoverBlock = undefined\n            for (let block of this.props.diagramScene.diagramBlocks) {\n                if (block != this.selectionBlock) {\n                    let rect = block.rect\n                    if (rect.contains(mousePos)) this.hoverBlock = block\n                } \n            }\n\n        } else if (this.mouseDownPos) {\n            logDigramSceneComponent.info(\"onMouseMove scene\")\n            let mousePos = this.clientToScene({ x: evt.pageX, y: evt.pageY });\n            let dx = mousePos.x - this.mouseDownPos.x\n            let dy = mousePos.y - this.mouseDownPos.y\n            let delta = distance({ x: dx, y: dy })\n            if (delta > 40)\n                this.props.diagramScene.sceneTranslateDelta = { x: dx, y: dy }\n\n        }\n    }\n\n    @action\n    onMouseUp(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        logDigramSceneComponent.info(\"onMouseUp\")\n        this.hoverBlock = undefined\n        if (this.selectionBlock && this.mouseDownPos) {\n            let mousePos = this.clientToScene({ x: evt.pageX, y: evt.pageY })\n            let translate = { x: mousePos.x - this.mouseDownPos.x, y: mousePos.y - this.mouseDownPos.y }\n            let dist = distance(translate)\n            if (dist > 20) {\n\n\n                let position = { x: this.selectionBlock.rect.x + mousePos.x - this.mouseDownPos.x, y: this.selectionBlock.rect.y + mousePos.y - this.mouseDownPos.y, }\n                this.selectionBlock.setPosition(position)\n                this.selectionBlock.dragEnd(mousePos)\n            } else {\n                this.selectionBlock.translate = { x: 0, y: 0 }\n            }\n            this.selectionBlock = undefined\n            this.mouseDownPos = undefined\n\n        } else if (this.mouseDownPos) {\n            let mousePos = this.clientToScene({ x: evt.pageX, y: evt.pageY })\n\n            let dx = mousePos.x - this.mouseDownPos.x\n            let dy = mousePos.y - this.mouseDownPos.y\n            let delta = distance({ x: dx, y: dy })\n            if (delta > 40) {\n\n                this.props.diagramScene.sceneTranslate.x += dx;\n                this.props.diagramScene.sceneTranslate.y += dy;\n            }\n            this.props.diagramScene.sceneTranslateDelta = { x: 0, y: 0 }\n            this.mouseDownPos = undefined\n\n        }\n\n    }\n\n    clientToScene(client: Vec2d): Vec2d {\n        return { x: client.x - this.props.diagramScene.sceneTranslate.x - this.x0, y: client.y - this.props.diagramScene.sceneTranslate.y - this.y0 }\n    }\n\n    onClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        this.props.diagramScene.activeButtons = []\n        //this.props.diagramScene.selectedBlock = undefined\n\n    }\n\n}","import { Vec2d, Rect } from \"./helpers\";\nimport { observable, action, computed } from \"mobx\"\nimport { DiagramConnection } from \"./DiagramConnection\";\nimport { DiagramSlot } from \"./DiagramSlot\";\nimport { DiagramImage } from \"./DiagramImage\";\n\ntype BlockEvents = \"click\" | \"doubleClick\"| \"dragStart\" | \"dragEnd\" |\n    \"dropBlock\" | \"dropConnection\" |\n    \"overMouse\" | \"overDragBlock\" | \"overDragConnection\" |\n    \"selected\" | \"changeName\" | \"changeRect\";\n\ntype BlockCallback = (block: DiagramBlock) => void\ntype BlockPositionCallback = (block: DiagramBlock, position: Vec2d) => void\ntype ConnectionCallback = (connection: DiagramConnection) => void\n\nclass DiagramBlockCallbacks {\n    clickCallbacks: BlockCallback[] = []\n    doubleClickCallbacks : BlockCallback[] =[] \n    changeRectCallbacks: BlockCallback[] = []\n    dragEndCallbacks: BlockPositionCallback[] = []\n    on(evt: BlockEvents, callback: BlockCallback | ConnectionCallback | BlockPositionCallback) {\n        switch (evt) {\n            case \"click\":\n                this.clickCallbacks.push(callback as BlockCallback)\n                break\n            case \"doubleClick\":\n                this.doubleClickCallbacks.push(callback as BlockCallback)\n                break\n\n            case \"changeRect\":\n                this.changeRectCallbacks.push(callback as BlockCallback)\n                break\n\n            case \"dragEnd\":\n                this.dragEndCallbacks.push(callback as BlockPositionCallback)\n\n        }\n    }\n\n    protected fireClick(block: DiagramBlock) {\n        for (let callback of this.clickCallbacks) callback(block)\n    }\n\n\n    protected fireDoubleClick(block: DiagramBlock) {\n        for (let callback of this.doubleClickCallbacks) callback(block)\n    }\n\n\n    protected fireChangeRect(block: DiagramBlock) {\n        for (let callback of this.changeRectCallbacks) callback(block)\n    }\n\n    protected fireDragEnd(block: DiagramBlock, position: Vec2d) {\n        for (let callback of this.dragEndCallbacks) callback(block, position)\n    }\n}\n\nexport class DiagramBlockStyle {\n    fill : string  = \"white\"\n    stroke : string = \"white\"\n    rx = 5\n    nstroke = 1 \n}\n\n\n\nexport class DiagramBlock extends DiagramBlockCallbacks {\n    uid: string\n    @observable name: string\n    type: string\n    @observable rect: Rect\n    @observable translate: Vec2d\n    @observable slots: DiagramSlot[]\n    @observable debugIdx: number\n    @observable finishedEditing : boolean = true\n    @observable requestedWidth ?: number \n    @observable image? : DiagramImage \n    @observable imageUrl : string = \"\"\n\n    constructor(uid: string, name: string, type: string, slots: DiagramSlot[], rect: Rect, image? : DiagramImage) {\n        super()\n        this.uid = uid\n        this.name = name\n        this.type = type\n        this.slots = slots\n        this.rect = rect\n        this.debugIdx = 0\n        this.translate = { x: 0, y: 0 }\n        this.image = image\n    }\n\n    @action setPosition(position: Vec2d) {\n        this.translate = { x: 0, y: 0 }\n\n        this.rect.x = position.x\n        this.rect.y = position.y\n        this.fireChangeRect(this)\n    }\n\n    click() { this.fireClick(this) }\n    doubleClick() { this.fireDoubleClick(this) }\n\n    dragEnd(position: Vec2d) { this.fireDragEnd(this, position) }\n\n\n    @computed get name2slot(): Map<string, DiagramSlot> {\n        let name2slot = new Map<string, DiagramSlot>()\n        for (let slot of this.slots) name2slot.set(slot.name, slot)\n        return name2slot\n    }\n\n}\n","import { Vec2d } from \"./helpers\";\n\nexport type DiagramButtonPositionHint = \"topLeft\" | \"topRight\" |\n    \"rightTop\" | \"rightBottom\" |\n    \"bottomLeft\" | \"bottomRight\" |\n    \"leftTop\" | \"leftBottom\"\n\nexport type ButtonIcon  = \"add\" | \"remove\"\n\nexport class DiagramButton {\n    position: Vec2d = { x: 0, y: 0 }\n\n    protected clickCallbacks: (() => void)[] = []\n    \n    constructor(public uid: string, public positionHint: DiagramButtonPositionHint, public icon: ButtonIcon, public color: string, callback?: () => void, ) {\n        if (callback) this.on(\"click\", callback)\n    }\n\n    click() { \n        for (let callback of this.clickCallbacks) callback()    \n    }\n    \n    on(evt: \"click\", callback: () => void) { this.clickCallbacks.push(callback) }\n}","import { DiagramEndpoint } from \"./DiagramEndpoint\";\nimport { Vec2d } from \"./helpers\";\nimport { observable } from \"mobx\";\n\nexport class DiagramConnection {\n    @observable fromPoint : Vec2d  \n    @observable toPoint : Vec2d\n    constructor(public from: DiagramEndpoint, public to: DiagramEndpoint, public type: string) { \n        this.fromPoint = {x : 0, y : 0}\n        this.toPoint = {x : 0, y : 0}\n    }\n\n    get uid() {\n        return `${this.from.blockUid}:${this.from.slot}:${this.to.blockUid}:${this.to.slot}`\n    }\n}\n\n","import { Vec2d } from \"./helpers\";\nimport { observable } from \"mobx\";\n\nexport class DiagramSlot {\n    @observable position: Vec2d\n    constructor(public name: string, public type: string, position: Vec2d = { x: 0, y: 0 }) { this.position = position }\n\n    get key() {\n        return this.name\n    }\n}\n","import { DiagramBlock } from \"../state/DiagramBlock\";\nimport { DiagramButton, DiagramButtonPositionHint } from \"../state/DiagramButton\";\nimport { MapList } from \"../state/helpers\";\n\nexport class DiagramButtonLayout {\n    layoutBlockButtons(block : DiagramBlock, buttons :DiagramButton[]) {\n        let regionButtons: MapList<DiagramButtonPositionHint, DiagramButton> = new MapList()\n\n        for (let button  of buttons) {\n            regionButtons.push(button.positionHint, button)\n        }\n\n        let rect = block.rect\n        let D = 20\n        let x = rect.x + rect.width - D / 2\n        let y = rect.y - D / 2 - D *0.2\n\n        for (let button of regionButtons.get(\"topRight\")) {\n            button.position = {x,y}\n            x -= D * 1.2\n        }\n\n\n    }\n}","import { DiagramScene } from \"./DiagramScene\";\nimport { computed } from \"mobx\";\nimport { DiagramBlock } from \"./DiagramBlock\";\nimport { DiagramConnection } from \"./DiagramConnection\";\nimport { MapList } from \"./helpers\";\n\nexport class DiagramStructure {\n    constructor(public scene: DiagramScene) {\n    }\n\n    @computed get blocks(): Map<string, DiagramBlock> {\n        let result = new Map<string, DiagramBlock>()\n        for (let block of this.scene.diagramBlocks) { result.set(block.uid, block) }\n        return result\n    }\n\n    @computed get blockConnections(): { input: MapList<string, DiagramConnection>, output: MapList<string, DiagramConnection> } {\n        let input = new MapList<string, DiagramConnection>()\n        let output = new MapList<string, DiagramConnection>()\n        for (let connection of this.scene.diagramConnections) {\n            input.push(connection.to.blockUid, connection)\n            output.push(connection.from.blockUid, connection)\n        }\n        return { input, output }\n    }\n\n    getOutputSlotConnections(blockUid: string, slot: string): DiagramConnection[] {\n        return this.blockConnections.output.get(blockUid).filter(connection => (connection.from.slot === slot))\n    }\n\n    getInputSlotConnections(blockUid: string, slot: string): DiagramConnection[] {\n        return this.blockConnections.input.get(blockUid).filter(connection => (connection.to.slot === slot))\n    }\n\n    getChildBlocks(blockUid: string): string[] {\n        let childBlocks: string[] = []\n        for (let connection of this.blockConnections.output.get(blockUid)) {\n            childBlocks.push(connection.to.blockUid)\n            childBlocks.push(...this.getChildBlocks(connection.to.blockUid))\n        }\n        return childBlocks\n    }\n\n}","import { DiagramStructure } from \"../state/DiagramStructure\";\nimport { DiagramBlock } from \"../state/DiagramBlock\";\nimport { action } from \"mobx\";\n\nexport class DiagramSlotLayout {\n    constructor(protected diagramStructure: DiagramStructure) {\n\n    }\n\n    @action\n    layout() {\n        let rootBlock = this.diagramStructure.scene.diagramBlocks[0]\n\n        if (rootBlock.type !== \"mmroot\") throw new Error(\"Invalid diagram structure\")\n        rootBlock.slots[0].position = { x: 0, y: rootBlock.rect.height / 2 }\n        rootBlock.slots[1].position = { x: rootBlock.rect.width, y: rootBlock.rect.height / 2 }\n\n        let rightChildBlocks = this.diagramStructure.getOutputSlotConnections(rootBlock.uid, \"or\")\n        let rightBlocks: string[] = []\n        for (let block of rightChildBlocks) {\n            rightBlocks.push(block.to.blockUid)\n            rightBlocks.push(...this.diagramStructure.getChildBlocks(block.to.blockUid))\n        }\n        let leftChildBlocks = this.diagramStructure.getOutputSlotConnections(rootBlock.uid, \"ol\")\n        let leftBlocks: string[] = []\n        for (let block of leftChildBlocks) {\n            leftBlocks.push(block.to.blockUid)\n            leftBlocks.push(...this.diagramStructure.getChildBlocks(block.to.blockUid))\n            //leftBlocks = leftBlocks.concat(,this.diagramData.getChildBlocks(block.toEndpoint.block))\n        }\n\n        for (let blockUid of rightBlocks) {\n            let block = this.diagramStructure.blocks.get(blockUid) as DiagramBlock\n            block.slots[0].position = { x: 0, y: block.rect.height / 2 }\n            block.slots[1].position = { x: block.rect.width, y: block.rect.height / 2 }\n        }\n\n        for (let blockUid of leftBlocks) {\n            let block = this.diagramStructure.blocks.get(blockUid) as DiagramBlock\n            block.slots[0].position = { x: block.rect.width, y: block.rect.height / 2 }\n            block.slots[1].position = { x: 0, y: block.rect.height / 2 }\n        }\n\n\n    }\n}","import { DiagramStructure } from \"../state/DiagramStructure\";\nimport { DiagramBlock } from \"../state/DiagramBlock\";\nimport { Vec2d } from \"../state/helpers\";\nimport { DiagramSlot } from \"../state/DiagramSlot\";\nimport { autorun, IReactionDisposer } from \"mobx\";\nimport { DiagramConnection } from \"../state/DiagramConnection\";\n\nexport class DiagramConnectionLayout {\n    constructor(private diagramStructure: DiagramStructure) { }\n    disposers : IReactionDisposer[] = []\n\n    layout() {\n        for (let disposer of this.disposers) disposer()\n\n        for (let connection of this.diagramStructure.scene.diagramConnections) {\n            let fromBlock = this.diagramStructure.blocks.get(connection.from.blockUid) as DiagramBlock\n            let toBlock = this.diagramStructure.blocks.get(connection.to.blockUid) as DiagramBlock\n            this.disposers.push(autorun(() => this.setConnectionPosition(connection, fromBlock, toBlock), {delay : 30 }))\n        }\n    }\n\n    setConnectionPosition(connection: DiagramConnection, fromBlock: DiagramBlock, toBlock: DiagramBlock) {\n        let fromPosition: Vec2d = (fromBlock.name2slot.get(connection.from.slot) as DiagramSlot).position\n        let toPosition: Vec2d = (toBlock.name2slot.get(connection.to.slot) as DiagramSlot).position\n        connection.fromPoint = { x: fromPosition.x + fromBlock.rect.x + fromBlock.translate.x, y: fromPosition.y + fromBlock.rect.y + fromBlock.translate.y }\n        connection.toPoint = { x: toPosition.x + toBlock.rect.x + toBlock.translate.x, y: toPosition.y + toBlock.rect.y+ toBlock.translate.y }\n    }\n}","import { DiagramStructure } from \"../state/DiagramStructure\";\nimport { MapList, Vec2d, Rect } from \"../state/helpers\";\nimport { DiagramBlock } from \"../state/DiagramBlock\";\nimport { logDiagramBlockLayout } from \"../../logging/Config\";\nlet defaultMMLayoutParams = {\n    hMargin: 30,\n    vMargin: 10\n}\n\nexport class DiagramBlockLayout {\n    blockColumns: Map<string, number> = new Map();\n    columnBlocks: MapList<number, string> = new MapList();\n    childShift: Map<string, number[]> = new Map()\n    blockHeight: Map<string, number> = new Map()\n    blockChildWidth: Map<string, number> = new Map()\n    columnWidth: Map<number, number> = new Map()\n    columnCenter: Map<number, number> = new Map()\n    blockPosition: Map<string, Vec2d> = new Map()\n\n    constructor(private diagramStructure: DiagramStructure, public parameters = defaultMMLayoutParams) { }\n\n\n\n    layoutColumns() {\n        if (!this.diagramStructure) throw new Error(\"Diagram data not defined\")\n        let blocks = this.diagramStructure.scene.diagramBlocks;\n        this.blockColumns = new Map()\n        this.columnBlocks = new MapList()\n        let inputConnections = this.diagramStructure.blockConnections.input\n        for (let i = 0; i < blocks.length; ++i) {\n            if (i === 0) {\n                this.blockColumns.set(blocks[i].uid, 0)\n                this.columnBlocks.push(i, blocks[i].uid)\n                if (!inputConnections.empty(blocks[i].uid)) {\n                    throw new Error(\"Invalid mm diagram blocks structure (first block must be root block - no input connections)\")\n                }\n            } else {\n                let inputBlockConnections = inputConnections.get(blocks[i].uid)\n                if (inputBlockConnections.length !== 1) {\n                    throw new Error(\"Invalid mm diagram blocks structure (each block except root must have exactly one input connection )\")\n                }\n\n                let oldColumn = this.blockColumns.get(inputBlockConnections[0].from.blockUid)\n                if (oldColumn === undefined) {\n                    throw new Error(\"Invalid mm diagram blocks structure (parent block must preceed child block)\")\n                } else {\n                    let newColumn = oldColumn\n                    if (newColumn === 0) {\n                        if (inputBlockConnections[0].from.slot === \"or\") {\n                            newColumn += 1\n                        } else {\n                            newColumn -= 1\n                        }\n                    } else if (newColumn > 0) newColumn += 1\n                    else if (newColumn < 0) newColumn -= 1\n                    this.blockColumns.set(blocks[i].uid, newColumn)\n                    this.columnBlocks.push(newColumn, blocks[i].uid)\n                }\n            }\n        }\n    }\n\n\n\n    layout() {\n        let { input, output } = this.diagramStructure.blockConnections\n\n        this.layoutColumns()\n\n        let columns = Array.from(this.columnBlocks.keys()).sort((a, b) => (a - b))\n        let firstColumn = columns[0]\n        let lastColumn = columns[columns.length - 1]\n\n        for (let column = firstColumn; column <= lastColumn; ++column) {\n            let maxWidth = 0\n            for (let block of this.columnBlocks.get(column) as string[]) {\n                maxWidth = Math.max(maxWidth, (this.diagramStructure.blocks.get(block) as DiagramBlock).rect.width)\n            }\n            this.columnWidth.set(column, maxWidth)\n        }\n\n        let x = 0\n        this.columnCenter.set(0, 0)\n        for (let column = 1; column <= lastColumn; ++column) {\n            let width = this.columnWidth.get(column - 1) as number\n            let width1 = this.columnWidth.get(column) as number\n            x = x + width / 2 + this.parameters.hMargin + width1 / 2\n            this.columnCenter.set(column, x)\n        }\n        x = 0\n\n        for (let column = -1; column >= firstColumn; --column) {\n            let width = this.columnWidth.get(column + 1) as number\n            let width1 = this.columnWidth.get(column) as number\n            x = x - width / 2 - this.parameters.hMargin - width1 / 2\n            this.columnCenter.set(column, x)\n        }\n        let rootBlock = this.diagramStructure.scene.diagramBlocks[0]\n        if (input.get(rootBlock.uid).length > 0) {\n            throw new Error(\"Invalid diagram structure, root block has input connections\")\n        }\n\n        for (let connection of output.get(rootBlock.uid)) {\n            this.updateChildHeight(connection.to.blockUid)\n        }\n\n        this.blockPosition.set(rootBlock.uid, { x: 0, y: 0 })\n\n\n        this.updateChildPositions(1, this.columnBlocks.get(1), { x: 0, y: 0 })\n        this.updateChildPositions(-1, this.columnBlocks.get(-1), { x: 0, y: 0 })\n\n        for (let block of this.diagramStructure.scene.diagramBlocks) {\n            let position = this.blockPosition.get(block.uid) as Vec2d\n            block.rect = new Rect(position.x - block.rect.width / 2,  position.y - block.rect.height / 2, block.rect.width, block.rect.height)\n            \n\n        }\n    }\n\n    updateChildPositions(column: number, blockUids: string[], parentPos: Vec2d) {\n        if (!this.diagramStructure) throw new Error(\"Diagram data not defined\")\n        let totalHeight = 0\n        for (let blockUid of blockUids) {\n            let height = this.blockHeight.get(blockUid) as number\n            totalHeight += height\n        }\n        totalHeight += (blockUids.length - 1) * this.parameters.vMargin;\n        let y = parentPos.y - totalHeight / 2\n        let x = this.columnCenter.get(column) as number\n        if (column > 0) column += 1\n        else column -= 1\n        for (let blockUid of blockUids) {\n            let height = this.blockHeight.get(blockUid) as number\n            let pos = { x, y: y + height / 2 }\n            this.blockPosition.set(blockUid, pos)\n            let childBlockUids = this.diagramStructure.blockConnections.output.get(blockUid).map(connection => connection.to.blockUid)\n            this.updateChildPositions(column, childBlockUids, pos)\n            y += height + this.parameters.vMargin\n        }\n\n    }\n    updateChildHeight(blockUid: string) {\n        let block = this.diagramStructure.blocks.get(blockUid) as DiagramBlock\n        let outputConnections = this.diagramStructure.blockConnections.output.get(blockUid)\n        let childrenHeight = 0\n        for (let connection of outputConnections) {\n            childrenHeight += this.updateChildHeight(connection.to.blockUid)\n        }\n        childrenHeight += this.parameters.vMargin * (outputConnections.length - 1)\n        let blockHeight = Math.max(childrenHeight, block.rect.height)\n        this.blockHeight.set(blockUid, blockHeight)\n        return blockHeight\n    }\n\n    getBlockColumn(block: string): number {\n        return this.blockColumns.get(block) as number\n    }\n\n\n    getBlocks(pos: Vec2d): DiagramBlock[] {\n        let res: DiagramBlock[] = []\n        for (let block of this.diagramStructure.scene.diagramBlocks) {\n            let rect = block.rect\n            if ((pos.x > rect.x) && (pos.x < rect.x + rect.width) &&\n                (pos.y > rect.y) && (pos.y < rect.y + rect.height)) res.push(block)\n        }\n\n        return res\n    }\n\n    getChildIdx(blockUid: string, parentUid: string, y: number): [number, number[]] {\n        if (!this.diagramStructure) throw new Error(\"Diagram data not defined\")\n        let uids: string[] = []\n        let outputConnections = this.diagramStructure.blockConnections.output\n        for (let connection of outputConnections.get(parentUid)) {\n            uids.push(connection.to.blockUid)\n        }\n\n        uids = uids.filter(uid => (blockUid !== uid))\n        logDiagramBlockLayout.info(`Found child uids ${uids}`)\n\n        let blocks: DiagramBlock[] = uids.map(uid => this.diagramStructure.blocks.get(uid) as DiagramBlock)\n\n\n\n\n\n        let blockIdxs: number[] = blocks.map(block => this.diagramStructure.scene.diagramBlocks.indexOf(block)).sort((a, b) => a - b);\n        let data = blockIdxs.map(blockIdx => [blockIdx, this.diagramStructure.scene.diagramBlocks[blockIdx].rect.y, this.diagramStructure.scene.diagramBlocks[blockIdx].rect.height])\n        logDiagramBlockLayout.info(() => `getChildIdx block rects ${data}`)\n        let i = 0;\n        for (let idx of blockIdxs) {\n            let block = this.diagramStructure.scene.diagramBlocks[idx]\n            let rect = block.rect\n            let yc = rect.y + rect.height / 2\n            if (y < yc) break\n            i++\n        }\n        return [i, blockIdxs]\n    }\n\n    getColumnIdx(xp: number): number | null {\n        let maxColumnIdx: number = Math.max(...Array.from(this.columnWidth.keys()))\n        let minColumnIdx: number = Math.min(...Array.from(this.columnWidth.keys()))\n        let x0 = - (this.columnWidth.get(0) as number) / 2\n        if (xp >= x0) {\n\n            for (let columnIdx = 0; columnIdx <= maxColumnIdx; ++columnIdx) {\n                x0 += this.columnWidth.get(columnIdx) as number\n                if (xp < x0) return columnIdx\n                x0 += this.parameters.hMargin\n            }\n            return null\n        }\n        else {\n            for (let columnIdx = -1; columnIdx >= minColumnIdx; --columnIdx) {\n                x0 -= this.columnWidth.get(columnIdx) as number\n                if (xp > x0) return columnIdx\n                x0 -= this.parameters.hMargin\n            }\n            return null\n        }\n    }\n\n\n}","import { DiagramBlock } from \"./DiagramBlock\";\nimport { observable, action, autorun, toJS, computed } from \"mobx\";\nimport { DiagramButtonLayout } from \"../layout/DiagramButtonLayout\";\nimport { DiagramButton } from \"./DiagramButton\";\nimport { DiagramConnection } from \"./DiagramConnection\";\nimport { DiagramStructure } from \"./DiagramStructure\";\nimport { DiagramSlotLayout } from \"../layout/DiagramSlotLayout\";\nimport { DiagramConnectionLayout } from \"../layout/DiagramConnectionLayout\";\nimport { DiagramBlockLayout } from \"../layout/DiagramBlockLayout\";\nimport { Vec2d } from \"./helpers\";\nimport { DiagramImage } from \"./DiagramImage\";\n\nexport class DiagramScene {\n    @observable diagramBlocks: DiagramBlock[]\n    @observable diagramConnections: DiagramConnection[]\n    @observable activeButtons: DiagramButton[] = []\n    @observable private _editedBlock?: DiagramBlock\n    @observable selectedBlock?: DiagramBlock\n\n    @observable onEdit: boolean = false\n    @observable structureChanging: boolean = false\n    @observable sceneTranslate: Vec2d = { x: 512, y: 500 }\n    @observable sceneTranslateDelta: Vec2d = { x: 0, y: 0 }\n    @observable image?: DiagramImage\n\n    diagramStructure: DiagramStructure\n\n    buttonLayout = new DiagramButtonLayout()\n    slotLayout: DiagramSlotLayout\n    blockLayout: DiagramBlockLayout\n    connectionLayout: DiagramConnectionLayout\n\n    oldEditedBlock?: DiagramBlock\n    constructor(diagramBlocks: DiagramBlock[] = [], diagramConnections: DiagramConnection[] = []) {\n        this.diagramBlocks = diagramBlocks\n        this.diagramConnections = diagramConnections\n        this.diagramStructure = new DiagramStructure(this)\n        this.slotLayout = new DiagramSlotLayout(this.diagramStructure)\n        this.blockLayout = new DiagramBlockLayout(this.diagramStructure)\n        this.connectionLayout = new DiagramConnectionLayout(this.diagramStructure)\n\n        autorun(() => {\n            let changed = false\n            for (let block of this.diagramBlocks) {\n                if (block.requestedWidth && block.finishedEditing && (block.rect.width != block.requestedWidth)) {\n                    block.rect.width = block.requestedWidth\n                    changed = true\n                }\n            }\n            if (changed) this.layout()\n        }, { name: \"asd\" })\n\n    }\n\n    @computed get editedBlock() {return this._editedBlock}\n    setEditedBlock(block? : DiagramBlock  ) {\n        if (this._editedBlock && this._editedBlock.requestedWidth && this._editedBlock.requestedWidth != this._editedBlock.rect.width) {\n            this._editedBlock.finishedEditing = true\n        }\n        this._editedBlock = block\n    }\n\n\n    showBlockButtons(block: DiagramBlock, buttons: DiagramButton[]) {\n        //setting button positions\n        this.buttonLayout.layoutBlockButtons(block, buttons)\n        this.activeButtons = buttons\n        for (let button of buttons) { button.on(\"click\", () => { this.activeButtons = [] }) }\n    }\n\n    @action layout() {\n        if (this.diagramBlocks.length > 0) {\n            \n            this.slotLayout.layout()\n            this.blockLayout.layout()\n            this.connectionLayout.layout()\n        }\n\n    }\n}","import { DiagramScene } from \"../state/DiagramScene\";\nimport { DiagramBlock } from \"../state/DiagramBlock\";\nimport { DiagramSlot } from \"../state/DiagramSlot\";\nimport { uuidv4, Rect } from \"../state/helpers\";\nimport { DiagramConnection } from \"../state/DiagramConnection\";\n\n\ninterface DiagramBlockJSON {\n    name: string,\n    children?: DiagramBlockJSON[]\n}\n\nexport interface DiagramSceneJSON {\n    root: {\n        name: string,\n        children?: {\n            left?: DiagramBlockJSON[],\n            right?: DiagramBlockJSON[]\n        }\n    }\n}\n\nexport class DiagramConvert {\n    static fromJSON(json: DiagramSceneJSON): DiagramScene {\n        let scene = new DiagramScene()\n        let rootBlock = new DiagramBlock(uuidv4(), json.root.name, \"mmroot\", [new DiagramSlot(\"ol\", \"o\"), new DiagramSlot(\"or\", \"o\")], new Rect(0,0,200,30))\n\n        scene.diagramBlocks.push(rootBlock)\n        if (json.root.children && json.root.children.left) {\n            this.addChildBlocksFromJson(json.root.children.left, scene, rootBlock, true)\n        }\n        if (json.root.children && json.root.children.right) {\n            this.addChildBlocksFromJson(json.root.children.right, scene, rootBlock, false)\n        }\n\n        return scene\n    }\n\n    static addChildBlocksFromJson(jsonBlocks: DiagramBlockJSON[], scene: DiagramScene, parentBlock: DiagramBlock, left?: boolean) {\n        for (let jsonBlock of jsonBlocks) {\n            let block = new DiagramBlock(uuidv4(), jsonBlock.name, \"mm\", [new DiagramSlot(\"i\", \"i\"), new DiagramSlot(\"o\", \"o\")], new Rect(0,0,100,30))\n            scene.diagramBlocks.push(block)\n            if (parentBlock.type == \"mmroot\") {\n                if (left) scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: 'ol' }, { blockUid: block.uid, slot: \"i\" }, \"mm\"))\n                else scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: 'or' }, { blockUid: block.uid, slot: \"i\" }, \"mm\"))\n            } else {\n                scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: 'o' }, { blockUid: block.uid, slot: \"i\" }, \"mm\"))\n            }\n\n            if (jsonBlock.children)\n                this.addChildBlocksFromJson(jsonBlock.children, scene, block)\n\n        }\n\n    }\n\n    static toJSON(scene: DiagramScene): DiagramSceneJSON {\n        let rootBlock = scene.diagramBlocks[0]\n        let result: DiagramSceneJSON = {\n            root: { name: rootBlock.name }\n        }\n        let leftConnections = scene.diagramStructure.getOutputSlotConnections(rootBlock.uid, \"ol\")\n        if (leftConnections.length > 0) {\n            result.root.children = { left: this.addChildBlocksFromScene(leftConnections, scene) }\n        }\n        let rightConnections = scene.diagramStructure.getOutputSlotConnections(rootBlock.uid, \"or\")\n        if (rightConnections.length > 0) {\n            if (result.root.children) result.root.children.right = this.addChildBlocksFromScene(rightConnections, scene)\n            else result.root.children = { right: this.addChildBlocksFromScene(rightConnections, scene) }\n        }\n        return result\n    }\n\n    static addChildBlocksFromScene(connections: DiagramConnection[], scene: DiagramScene): DiagramBlockJSON[] {\n        let res: DiagramBlockJSON[] = []\n        for (let connection of connections) {\n            let block = scene.diagramStructure.blocks.get(connection.to.blockUid) as DiagramBlock;\n            let newBlock: DiagramBlockJSON = { name: block.name }\n            let connections = scene.diagramStructure.getOutputSlotConnections(block.uid, \"o\")\n            if (connections.length > 0) {\n                newBlock.children = this.addChildBlocksFromScene(connections, scene)\n            }\n            res.push(newBlock)\n        }\n        return res\n\n    }\n}","import React, { Component } from 'react';\nimport { DiagramScene } from '../state/DiagramScene';\nimport styled, { StyledComponent } from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { Rect } from '../state/helpers';\nimport { DiagramBlock } from '../state/DiagramBlock';\nimport { action } from 'mobx';\n\n\nconst EditPosition = styled.div<{ rect: Rect }>`\n    position:absolute;\n    left :${p => p.rect.x}px;\n    top : ${p => p.rect.y}px;\n    width : ${p => p.rect.width}px;\n    height : ${p => p.rect.height}px;\n`\n\nconst MyInput = styled.input`\nwidth: 80%;\nheight: 60%;\nmargin-left: 7%;\nmargin-top:3px;\n`\n\n@observer\nclass MyComponent extends React.Component<{ block: DiagramBlock, onKeyDown: (evt: React.KeyboardEvent<HTMLInputElement>) => void }> {\n\n    private myRef = React.createRef<HTMLInputElement>()\n    focusOut = false\n    constructor(props: any) {\n        super(props)\n    }\n\n    componentDidMount() {\n        this.props.block.finishedEditing = false\n        if (this.myRef.current) {\n            this.myRef.current.focus()\n            this.myRef.current.setSelectionRange(0,this.props.block.name.length)\n        }\n    }\n\n    componentWillUnmount() {\n        console.log(\"Will unmount\")\n        this.props.block.finishedEditing = true\n    }\n    handleBlur = (e:React.FocusEvent<HTMLInputElement>) => {\n        if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n            this.props.block.name = e.target.value\n            this.focusOut = true\n        }\n    }\n\n    render() {\n        \n        return (<MyInput ref={this.myRef} type=\"text\" value={this.props.block.name} onFocus={evt=>{this.focusOut = false}} onBlur={evt=> this.handleBlur(evt)} onChange={evt => { if(!this.focusOut) this.props.block.name = evt.target.value; }} onKeyDown={this.props.onKeyDown} />)\n    }\n}\n\n@observer\nexport class DiagramEditComponent extends React.Component<{ scene: DiagramScene }> {\n\n    render() {\n        if (this.props.scene.editedBlock) {\n            let rect = Rect.copy( this.props.scene.editedBlock.rect )\n            rect.x += this.props.scene.sceneTranslate.x\n            rect.y += this.props.scene.sceneTranslate.y\n\n            return <EditPosition rect={rect}><MyComponent block={this.props.scene.editedBlock} onKeyDown={(evt) => this.handleKeyDown(evt)} /></EditPosition>\n        }\n        else {\n            return null\n        }\n\n    }\n    @action\n    private handleKeyDown(evt: React.KeyboardEvent<HTMLInputElement>) {\n        if ((this.props.scene.editedBlock) && (evt.key === \"Enter\")) {\n            this.props.scene.setEditedBlock(undefined)\n            this.props.scene.onEdit = true\n            this.props.scene.activeButtons = [] \n        }\n    }\n\n}","import React from 'react';\nimport styled from 'styled-components'\nimport { DiagramSceneComponent } from '../lib/component/DiagramSceneComponent';\nimport { DiagramScene } from '../lib/state/DiagramScene';\nimport { DiagramBlock } from '../lib/state/DiagramBlock';\nimport { DiagramButton, ButtonIcon } from '../lib/state/DiagramButton';\nimport { uuidv4, Vec2d, removeItems, Rect } from '../lib/state/helpers';\nimport { DiagramConnection } from '../lib/state/DiagramConnection';\nimport { DiagramSlot as Slot, DiagramSlot } from '../lib/state/DiagramSlot';\nimport { action, autorun, observable } from 'mobx';\nimport { DiagramConvert, DiagramSceneJSON } from '../lib/convert/DiagramConvert';\nimport { logMindMap, mindMapDragLog } from '../logging/Config';\nimport { DiagramEditComponent } from '../lib/component/DiagramEditComponent';\nimport { observer } from 'mobx-react';\nimport { DiagramImage } from '../lib/state/DiagramImage';\n\nconst MM = styled.div`\n    position:absolute;\n    width : 100%;\n    height : 100%;\n`\n\n\n\n\n@observer\nexport class MindMapComponent extends React.Component<{ scene: DiagramScene, vscode?: any, jsonDiagram?: DiagramSceneJSON, image?: DiagramImage }>{\n    @observable diagramScene: DiagramScene\n    vscode?: any\n    constructor(props: any) {\n        super(props)\n        this.vscode = this.props.vscode\n        //if (this.props.jsonDiagram) {\n        if (false) {\n            //this.diagramScene = DiagramConvert.fromJSON(this.props.jsonDiagram)\n        } else {\n            this.diagramScene = this.props.scene\n            let rootBlock = new DiagramBlock(uuidv4(), \"Enter diagram name\", \"mmroot\", [new DiagramSlot(\"ol\", \"o\"), new DiagramSlot(\"or\", \"o\")], new Rect(0, 0, 100, 30))\n            this.diagramScene.diagramBlocks.push(rootBlock)\n\n        }\n\n        this.addCallbacks(this.diagramScene.diagramBlocks);\n        this.diagramScene.layout()\n        window.addEventListener('message', event => {\n            const message = event.data; // The JSON data our extension sent\n            switch (message.command) {\n                case \"setJsonDocument\":\n                    logMindMap.info(\"setJsonDocument\", message.document)\n                    let doc: DiagramSceneJSON = message.document\n                    this.vscode.setState(doc)\n                    this.diagramScene = DiagramConvert.fromJSON(doc)\n                    this.diagramScene.layout()\n                    this.addCallbacks(this.diagramScene.diagramBlocks);\n                    break\n                case \"addChild\":\n                    logMindMap.info(\"addChild message\")\n                    if (this.diagramScene.selectedBlock) {\n                        if (this.diagramScene.editedBlock) this.diagramScene.setEditedBlock(undefined)\n                        this.addBlock(this.diagramScene.selectedBlock)\n                    }\n                    break\n                case \"addSibling\":\n                    logMindMap.info(\"addSibling message\")\n                    if (this.diagramScene.selectedBlock) {\n                        if (this.diagramScene.editedBlock) this.diagramScene.setEditedBlock(undefined)\n                        this.addSibling(this.diagramScene.selectedBlock)\n                    }\n                    break\n\n                case \"remove\":\n                    logMindMap.info(\"removeBlock message\")\n                    if (this.diagramScene.selectedBlock) {\n                        if (this.diagramScene.editedBlock) this.diagramScene.setEditedBlock(undefined)\n                        this.removeBlock(this.diagramScene.selectedBlock)\n                    }\n                    break\n\n            }\n\n        });\n\n        autorun(() => {\n            if (this.diagramScene.onEdit && this.vscode && !this.diagramScene.editedBlock) {\n                let jsonDiagram = DiagramConvert.toJSON(this.diagramScene)\n\n                this.vscode.postMessage({ message: \"setDocument\", document: jsonDiagram })\n                this.vscode.setState(jsonDiagram)\n                this.diagramScene.onEdit = false\n            }\n        })\n    }\n\n    private addCallbacks(blocks: DiagramBlock[]) {\n        for (let block of blocks) {\n            block.on(\"click\", (block: DiagramBlock) => {\n                let addButton = new DiagramButton(\"addB\", \"topRight\", \"add\", \"red\", () => {\n                    this.addBlock(block);\n                });\n\n                let removeButton = new DiagramButton(\"removeB\", \"topRight\", \"remove\", \"red\", () => {\n                    this.removeBlock(block);\n                });\n\n                this.diagramScene.showBlockButtons(block, [addButton, removeButton]);\n            });\n            block.on(\"dragEnd\", (block: DiagramBlock, position: Vec2d) => {\n                logMindMap.info(`Block drag end '${block.name}' (${position.x},${position.y})`)\n                this.endDragging(block, position);\n                this.diagramScene.layout();\n\n            });\n            block.on(\"doubleClick\", (block: DiagramBlock) => {\n                logMindMap.info(`Block double click ${block.uid}`);\n                this.diagramScene.setEditedBlock(block)\n                this.diagramScene.activeButtons = []\n            });\n        }\n    }\n\n    componentDidMount() {\n        if (this.vscode)\n            this.vscode.postMessage({ message: \"getDocument\" })\n        else {\n\n\n        }\n    }\n\n    render() {\n        return <MM>\n\n            <DiagramEditComponent scene={this.diagramScene}></DiagramEditComponent>\n            <DiagramSceneComponent diagramScene={this.diagramScene}></DiagramSceneComponent>\n        </MM>\n    }\n\n    @action\n    removeBlock(block: DiagramBlock) {\n        if (block.type === \"mmroot\") return;\n        logMindMap.info(`removeBlock ${block.name}`)\n        let childBlocks = this.diagramScene.diagramStructure.getChildBlocks(block.uid).map(uid => this.diagramScene.diagramStructure.blocks.get(uid) as DiagramBlock)\n        childBlocks.push(block)\n        let connections: DiagramConnection[] = []\n        for (let block of childBlocks) {\n            connections.push(this.diagramScene.diagramStructure.blockConnections.input.get(block.uid)[0] as DiagramConnection)\n\n        }\n\n        for (let block of childBlocks) {\n            let idx = this.diagramScene.diagramBlocks.indexOf(block)\n            this.diagramScene.diagramBlocks.splice(idx, 1)\n        }\n\n        for (let connection of connections) {\n            let idx = this.diagramScene.diagramConnections.indexOf(connection)\n            this.diagramScene.diagramConnections.splice(idx, 1)\n\n        }\n        this.diagramScene.layout()\n        this.diagramScene.onEdit = true;\n        this.diagramScene.selectedBlock = undefined\n        this.diagramScene.activeButtons = []\n    }\n\n    @action\n    addSibling(block: DiagramBlock) {\n        if (block.type != \"mmroot\") {\n            let parentUid = this.diagramScene.diagramStructure.blockConnections.input.get(block.uid)[0].from.blockUid\n            let parentBlock = this.diagramScene.diagramStructure.blocks.get(parentUid) as DiagramBlock\n            this.addBlock(parentBlock)\n            this.diagramScene.activeButtons = []\n        }\n\n    }\n\n    @action\n    addBlock(parentBlock: DiagramBlock) {\n        logMindMap.info(`addBlock (parent=${parentBlock.name})`)\n        let block = new DiagramBlock(uuidv4(), \"Unnamed element\", \"mm\", [new Slot(\"i\", \"i\"), new Slot(\"o\", \"o\")], new Rect(0, 0, 100, 30))\n        this.addCallbacks([block])\n\n        let newConnection: DiagramConnection\n        if (parentBlock.type === \"mmroot\") {\n            newConnection = new DiagramConnection({ blockUid: parentBlock.uid, slot: \"or\" }, { blockUid: block.uid, slot: \"i\" }, \"mm\")\n        }\n        else {\n            newConnection = new DiagramConnection({ blockUid: parentBlock.uid, slot: \"o\" }, { blockUid: block.uid, slot: \"i\" }, \"mm\")\n        }\n        this.diagramScene.diagramBlocks.push(block)\n        this.diagramScene.diagramConnections.push(newConnection)\n\n        this.diagramScene.layout()\n        this.diagramScene.setEditedBlock(block)\n        this.diagramScene.selectedBlock = block\n        this.diagramScene.onEdit = true\n        this.diagramScene.activeButtons = []\n\n    }\n    @action\n    endDragging(block: DiagramBlock, dragPosition: Vec2d) {\n        logMindMap.info(`endDragging ${block.name} : (${dragPosition.x}, ${dragPosition.y})`)\n        if (block.type === \"mmroot\") return;\n\n\n        let layout = this.diagramScene.blockLayout\n        let scene = this.diagramScene\n        let structure = scene.diagramStructure\n        let inputConnections = structure.blockConnections.input.get(block.uid)\n        let inputBlock = structure.blocks.get(inputConnections[0].from.blockUid) as DiagramBlock\n\n        let childBlocks = this.diagramScene.diagramStructure.getChildBlocks(block.uid).map(uid => this.diagramScene.diagramStructure.blocks.get(uid) as DiagramBlock)\n        let occupiedBlocks = layout.getBlocks(dragPosition)\n        occupiedBlocks = removeItems(occupiedBlocks, block, ...childBlocks)\n        mindMapDragLog.info(`found N occupied blocks ${occupiedBlocks.length}`)\n        if (occupiedBlocks.length > 0) {\n            let parentBlock = occupiedBlocks[0]\n\n            let blockUids = [block.uid].concat(structure.getChildBlocks(block.uid))\n            let blocks = blockUids.map(blockUid => structure.blocks.get(blockUid) as DiagramBlock)\n            this.diagramScene.diagramConnections = removeItems(scene.diagramConnections, structure.blockConnections.input.get(block.uid)[0])\n\n            this.diagramScene.diagramBlocks = removeItems(this.diagramScene.diagramBlocks, ...blocks)\n\n            //let parentBlock = this.diagramData.getBlock(parentBlockUid)\n            let parentBlockIdx = scene.diagramBlocks.indexOf(parentBlock)\n\n            scene.diagramBlocks.splice(parentBlockIdx + 1, 0, ...blocks)\n            if (parentBlock.type === \"mmroot\") {\n                if (dragPosition.x > 0)\n                    scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: \"or\" }, { blockUid: blockUids[0], slot: \"i\" }, \"mm\"))\n                else\n                    scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: \"ol\" }, { blockUid: blockUids[0], slot: \"i\" }, \"mm\"))\n            } else\n                scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: \"o\" }, { blockUid: blockUids[0], slot: \"i\" }, \"mm\"))\n            scene.layout()\n\n            this.diagramScene.onEdit = true;\n\n            //layout.layout()\n        }\n\n        else {\n            if (inputBlock.type === \"mmroot\") {\n                if (dragPosition.x > 0) {\n                    inputConnections[0].from.slot = \"or\"\n                } else {\n                    inputConnections[0].from.slot = \"ol\"\n                }\n            }\n\n            {\n\n                // let blockColumn = layout.getBlockColumn(block.uid)\n                // let positionColumn = layout.getColumnIdx(dragPosition.x)\n                // mindMapDragLog.info(`Block column ${blockColumn}, position column ${positionColumn}`)\n                // if (positionColumn === blockColumn) {\n                let connection = inputConnections[0]\n                let [idx, blockIdxs] = layout.getChildIdx(block.uid, connection.from.blockUid, dragPosition.y)\n                mindMapDragLog.info(`Child idx ${blockIdxs}[${idx}]`)\n                if (blockIdxs.length > 0) {\n                    let newIdx = -1;\n                    let nextBlock: DiagramBlock | null = null\n                    if (idx === blockIdxs.length) {\n                    } else {\n                        newIdx = blockIdxs[idx]\n                        nextBlock = scene.diagramBlocks[newIdx]\n                    }\n\n                    let blockUids = [block.uid].concat(structure.getChildBlocks(block.uid))\n                    let blocks = blockUids.map(blockUid => structure.blocks.get(blockUid) as DiagramBlock)\n\n                    scene.diagramBlocks = removeItems(scene.diagramBlocks, ...blocks)\n\n                    if (nextBlock) {\n                        let nextConnection = scene.diagramStructure.blockConnections.input.get(nextBlock.uid)[0]\n                        let nextConnectionIdx = scene.diagramConnections.indexOf(nextConnection)\n                        let cidx = this.diagramScene.diagramConnections.indexOf(connection)\n                        this.diagramScene.diagramConnections.splice(cidx, 1)\n                        this.diagramScene.diagramConnections.splice(nextConnectionIdx - 1, 0, connection)\n\n                        let idx = scene.diagramBlocks.indexOf(nextBlock)\n                        scene.diagramBlocks.splice(idx, 0, ...blocks)\n                    }\n                    else {\n                        scene.diagramBlocks.push(...blocks)\n                        let cidx = this.diagramScene.diagramConnections.indexOf(connection)\n                        this.diagramScene.diagramConnections.splice(cidx, 1)\n                        this.diagramScene.diagramConnections.push(connection)\n\n                    }\n\n\n                }\n\n                scene.layout()\n                this.diagramScene.onEdit = true;\n\n\n\n            }\n\n        }\n\n    }\n}","\nexport class DiagramImage {\n    image : string\n\n    constructor(image :string) {\n        this.image = image\n    }\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { MindMapComponent } from './components/MindMapComponent';\nimport { DiagramImage } from './lib/state/DiagramImage';\nimport { DiagramScene } from './lib/state/DiagramScene';\n\n\ndeclare var acquireVsCodeApi: any;\n\nconst App: React.FC = () => {\n  let scene = new DiagramScene()\n\n  function setImageUrl(evt: React.ChangeEvent<HTMLInputElement>) {\n    if (evt.target.files && evt.target.files.length > 0) {\n      var fr = new FileReader();\n      fr.onload = function () {\n        let newImage = new DiagramImage(fr.result as string)\n        scene.diagramBlocks[0].image = newImage\n      }\n      fr.readAsDataURL(evt.target.files[0]);\n    }\n  }\n\n\n  if (typeof acquireVsCodeApi !== 'undefined') {\n    let vscode = acquireVsCodeApi()\n    let jsonDiagram = vscode.getState()\n    return (\n      <div>\n\n        <MindMapComponent scene={scene} jsonDiagram={jsonDiagram} vscode={vscode}  />\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <input type=\"file\" name=\"picField\" id=\"picField\" onChange={(evt) => { setImageUrl(evt) }} />\n\n        <MindMapComponent scene={scene} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}