{"version":3,"sources":["lib/component/DiagramSlotComponent.tsx","lib/state/helpers.ts","lib/state/DiagramStyles.ts","lib/component/DiagramBlockComponent.tsx","lib/component/buttons/AddButtonComponent.tsx","lib/component/buttons/RemoveButtonComponent.tsx","lib/component/DiagramButtonComponet.tsx","lib/component/DiagramConnectionComponent.tsx","logging/Config.ts","lib/component/DiagramSceneComponent.tsx","lib/state/DiagramBlock.ts","lib/state/DiagramButton.ts","lib/state/DiagramConnection.ts","lib/state/DiagramSlot.ts","lib/layout/DiagramButtonLayout.ts","lib/state/DiagramStructure.ts","lib/layout/DiagramSlotLayout.ts","lib/layout/DiagramConnectionLayout.ts","lib/layout/DiagramBlockLayout.ts","lib/state/DiagramScene.ts","lib/convert/DiagramConvert.ts","lib/component/DiagramEditComponent.tsx","components/SelectComponent.tsx","components/MindMapComponent.tsx","lib/state/DiagramImage.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DiagramSlotComponent","observer","transform","this","props","slot","position","x","y","onClick","evt","r","fill","React","Component","Rect","width","height","p","other","observable","MapList","map","Map","key","value","values","get","push","set","length","keys","uuidv4","replace","c","Math","random","toString","removeItems","array","elems","elem","index","indexOf","splice","distance","v","v1","d","sqrt","colourNameToHex","colour","colours","Object","entries","has","styleUpdate","defaultStyle","fontSize","fontColor","backgroundColor","margin","top","bottom","left","right","borderRepeat","rx","strokeColor","strokeWidth","updateDefaultStyle","style","BlockImageElement","myRef","createRef","current","rect","getBoundingClientRect","onSize","block","image","ref","xlinkHref","ScaledSvgText","size","getBBox","console","log","textHeight","pointerEvents","userSelect","dominantBaseline","textAnchor","name","DiagramBlockComponent","bbox","translate","scale","min","stroke","dispose","onTextSize","textSize","updateRequestedSize","onImageSize","imageSize","blockStyle","frames","i","dx","isSelected","isHovered","autorun","onMouseDown","onDoubleClick","renderFrame","isEdited","slots","requestedWidth","requestedHeight","onSelect","clientX","clientY","stopPropagation","click","doubleClick","action","computed","AddButtonComponent","id","ry","RemoveButtonComponent","DiagramButtonComponent","element","button","color","icon","DiagramConnectionComponent","x1","connection","fromPoint","y1","x2","toPoint","y2","CategoryServiceFactory","setDefaultConfiguration","CategoryConfiguration","LogLevel","Info","logMindMap","Category","mindMapDragLog","logDiagramBlockLayout","logDigramSceneComponent","DiagramSceneComponent","x0","y0","mouseDownPos","selectionBlock","dy","diagramScene","sceneTranslate","sceneTranslateDelta","xmlns","xmlnsXlink","onMouseMove","onMouseUp","diagramBlocks","uid","selectedBlock","hoverBlock","editedBlock","pos","diagramConnections","activeButtons","clientToScene","setEditedBlock","undefined","info","onEdit","pageX","pageY","mousePos","contains","setPosition","dragEnd","client","DiagramBlock","type","debugIdx","fireChangeRect","fireClick","fireDoubleClick","fireDragEnd","name2slot","clickCallbacks","doubleClickCallbacks","changeRectCallbacks","dragEndCallbacks","callback","DiagramButton","positionHint","on","DiagramConnection","from","to","blockUid","DiagramSlot","DiagramButtonLayout","buttons","regionButtons","D","DiagramStructure","scene","keepAlive","blockConnections","output","filter","input","childBlocks","getChildBlocks","rootDir","connections","blocks","res","columnIdx","delta","updateBlockPosition","result","rootBlock","outputConnections","leftConnections","rightConnections","DiagramSlotLayout","diagramStructure","Error","rightChildBlocks","getOutputSlotConnections","rightBlocks","leftChildBlocks","leftBlocks","DiagramConnectionLayout","disposers","disposer","fromBlock","toBlock","setConnectionPosition","delay","fromPosition","toPosition","defaultMMLayoutParams","hMargin","vMargin","DiagramBlockLayout","parameters","blockColumns","columnBlocks","childShift","blockHeight","blockChildWidth","columnWidth","columnCenter","blockPosition","inputConnections","empty","inputBlockConnections","oldColumn","newColumn","layoutColumns","columns","Array","sort","a","b","firstColumn","lastColumn","column","maxWidth","max","width1","updateChildHeight","updateChildPositions","blockUids","parentPos","totalHeight","childBlockUids","childrenHeight","parentUid","uids","blockIdxs","data","blockIdx","idx","xp","maxColumnIdx","minColumnIdx","DiagramScene","buttonLayout","slotLayout","blockLayout","connectionLayout","_previouseName","oldEditedBlock","changed","finishedEditing","layout","cancel","_editedBlock","_selectedBlock","layoutBlockButtons","getBlockColumnIdx","blockSide","selectParent","selectChild","getParentBlock","childBlock","getFistChildBlock","_previousSelection","DiagramConvert","json","root","children","addChildBlocksFromJson","jsonBlocks","parentBlock","jsonBlock","toJS","addChildBlocksFromScene","newBlock","EditPosition","styled","div","MyInput","MyComponent","focusOut","handleBlur","e","currentTarget","relatedTarget","target","focus","setSelectionRange","onFocus","onBlur","onChange","onKeyDown","DiagramEditComponent","copy","handleKeyDown","SelectComponent","selectRef","useRef","selectedIndex","options","op","MM","MindMapComponent","addedBlock","vscode","mainRef","fontsSizes","strokeSize","margins","keyDown","up","preventDefault","down","setStyle","styles","setFont","parseInt","setStrokeWidth","setMargin","m","setBackgroundColor","addCallbacks","window","addEventListener","event","message","command","document","doc","setState","fromJSON","selectRootElement","addBlock","addSibling","removeBlock","edit","clear","jsonDiagram","toJSON","postMessage","addButton","removeButton","showBlockButtons","endDragging","newConnection","Slot","dragPosition","structure","inputBlock","occupiedBlocks","getBlocks","concat","parentBlockIdx","getChildIdx","newIdx","nextBlock","nextConnection","nextConnectionIdx","cidx","tabIndex","val","DiagramImage","App","acquireVsCodeApi","getState","files","fr","FileReader","onload","newImage","readAsDataURL","setImageUrl","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a0d3baf.chunk.js","sourcesContent":["import React from 'react';\nimport { DiagramSlot } from '../state/DiagramSlot';\nimport { observer } from 'mobx-react';\n\n@observer\nexport class DiagramSlotComponent extends React.Component<{ slot: DiagramSlot }> {\n    render() {\n        return <g transform={`translate(${this.props.slot.position.x},${this.props.slot.position.y}) rotate(0)`} onClick={evt => this.onClick(evt)} >\n            <circle r=\"3\" fill=\"gray\" />\n        </g>\n    }\n\n    onClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        //this.props.button.click()\n    }\n\n}","import { func } from \"prop-types\"\nimport { observable } from \"mobx\"\n\nexport interface Vec2d { x: number, y: number }\n\nexport class Rect {\n    @observable x: number\n    @observable y: number\n    @observable width: number\n    @observable height: number\n\n    constructor(x: number, y: number, width: number, height: number) {\n        this.x = x\n        this.y = y\n        this.width = width\n        this.height = height\n    }\n\n    contains (p : Vec2d) :boolean {\n        if (p.x < this.x || p.x > this.x + this.width || p.y < this.y || p.y > this.y + this.height) return false\n        return true\n    }\n\n    static copy(other : Rect) {\n        return new Rect(other.x, other.y, other.width, other.height)\n    }\n}\n\nexport class MapList<Key, Value> {\n    map: Map<Key, Value[]> = new Map()\n\n    push(key: Key, value: Value) {\n        let values = this.map.get(key) || []\n        values.push(value)\n        this.map.set(key, values)\n    }\n\n    get(key: Key) {\n        return this.map.get(key) || []\n    }\n\n    empty(key: Key) {\n        return this.get(key).length === 0\n    }\n\n    keys() {\n        return this.map.keys()\n\n    }\n}\n\nexport function uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\n        return v.toString(16);\n    });\n}\n\nexport function removeItems<T>(array: Array<T>, ...elems: T[]): Array<T> {\n    for (let elem of elems) {\n        let index = array.indexOf(elem)\n        if (index !== -1) {\n            array.splice(index, 1)\n        }\n    }\n    return array\n}\n\nexport function distance(v: Vec2d, v1? : Vec2d) {\n    let d = v\n    if (v1) {\n        d = {x : v.x - v1.x, y: v.y - v1.y}\n    }\n    return Math.sqrt(d.x * d.x + d.y * d.y)\n}\n\nexport function colourNameToHex(colour : string )\n{\n    \n    var colours = new Map(Object.entries({\"aliceblue\":\"#f0f8ff\",\"antiquewhite\":\"#faebd7\",\"aqua\":\"#00ffff\",\"aquamarine\":\"#7fffd4\",\"azure\":\"#f0ffff\",\n    \"beige\":\"#f5f5dc\",\"bisque\":\"#ffe4c4\",\"black\":\"#000000\",\"blanchedalmond\":\"#ffebcd\",\"blue\":\"#0000ff\",\"blueviolet\":\"#8a2be2\",\"brown\":\"#a52a2a\",\"burlywood\":\"#deb887\",\n    \"cadetblue\":\"#5f9ea0\",\"chartreuse\":\"#7fff00\",\"chocolate\":\"#d2691e\",\"coral\":\"#ff7f50\",\"cornflowerblue\":\"#6495ed\",\"cornsilk\":\"#fff8dc\",\"crimson\":\"#dc143c\",\"cyan\":\"#00ffff\",\n    \"darkblue\":\"#00008b\",\"darkcyan\":\"#008b8b\",\"darkgoldenrod\":\"#b8860b\",\"darkgray\":\"#a9a9a9\",\"darkgreen\":\"#006400\",\"darkkhaki\":\"#bdb76b\",\"darkmagenta\":\"#8b008b\",\"darkolivegreen\":\"#556b2f\",\n    \"darkorange\":\"#ff8c00\",\"darkorchid\":\"#9932cc\",\"darkred\":\"#8b0000\",\"darksalmon\":\"#e9967a\",\"darkseagreen\":\"#8fbc8f\",\"darkslateblue\":\"#483d8b\",\"darkslategray\":\"#2f4f4f\",\"darkturquoise\":\"#00ced1\",\n    \"darkviolet\":\"#9400d3\",\"deeppink\":\"#ff1493\",\"deepskyblue\":\"#00bfff\",\"dimgray\":\"#696969\",\"dodgerblue\":\"#1e90ff\",\n    \"firebrick\":\"#b22222\",\"floralwhite\":\"#fffaf0\",\"forestgreen\":\"#228b22\",\"fuchsia\":\"#ff00ff\",\n    \"gainsboro\":\"#dcdcdc\",\"ghostwhite\":\"#f8f8ff\",\"gold\":\"#ffd700\",\"goldenrod\":\"#daa520\",\"gray\":\"#808080\",\"green\":\"#008000\",\"greenyellow\":\"#adff2f\",\n    \"honeydew\":\"#f0fff0\",\"hotpink\":\"#ff69b4\",\n    \"indianred \":\"#cd5c5c\",\"indigo\":\"#4b0082\",\"ivory\":\"#fffff0\",\"khaki\":\"#f0e68c\",\n    \"lavender\":\"#e6e6fa\",\"lavenderblush\":\"#fff0f5\",\"lawngreen\":\"#7cfc00\",\"lemonchiffon\":\"#fffacd\",\"lightblue\":\"#add8e6\",\"lightcoral\":\"#f08080\",\"lightcyan\":\"#e0ffff\",\"lightgoldenrodyellow\":\"#fafad2\",\n    \"lightgrey\":\"#d3d3d3\",\"lightgreen\":\"#90ee90\",\"lightpink\":\"#ffb6c1\",\"lightsalmon\":\"#ffa07a\",\"lightseagreen\":\"#20b2aa\",\"lightskyblue\":\"#87cefa\",\"lightslategray\":\"#778899\",\"lightsteelblue\":\"#b0c4de\",\n    \"lightyellow\":\"#ffffe0\",\"lime\":\"#00ff00\",\"limegreen\":\"#32cd32\",\"linen\":\"#faf0e6\",\n    \"magenta\":\"#ff00ff\",\"maroon\":\"#800000\",\"mediumaquamarine\":\"#66cdaa\",\"mediumblue\":\"#0000cd\",\"mediumorchid\":\"#ba55d3\",\"mediumpurple\":\"#9370d8\",\"mediumseagreen\":\"#3cb371\",\"mediumslateblue\":\"#7b68ee\",\n    \"mediumspringgreen\":\"#00fa9a\",\"mediumturquoise\":\"#48d1cc\",\"mediumvioletred\":\"#c71585\",\"midnightblue\":\"#191970\",\"mintcream\":\"#f5fffa\",\"mistyrose\":\"#ffe4e1\",\"moccasin\":\"#ffe4b5\",\n    \"navajowhite\":\"#ffdead\",\"navy\":\"#000080\",\n    \"oldlace\":\"#fdf5e6\",\"olive\":\"#808000\",\"olivedrab\":\"#6b8e23\",\"orange\":\"#ffa500\",\"orangered\":\"#ff4500\",\"orchid\":\"#da70d6\",\n    \"palegoldenrod\":\"#eee8aa\",\"palegreen\":\"#98fb98\",\"paleturquoise\":\"#afeeee\",\"palevioletred\":\"#d87093\",\"papayawhip\":\"#ffefd5\",\"peachpuff\":\"#ffdab9\",\"peru\":\"#cd853f\",\"pink\":\"#ffc0cb\",\"plum\":\"#dda0dd\",\"powderblue\":\"#b0e0e6\",\"purple\":\"#800080\",\n    \"rebeccapurple\":\"#663399\",\"red\":\"#ff0000\",\"rosybrown\":\"#bc8f8f\",\"royalblue\":\"#4169e1\",\n    \"saddlebrown\":\"#8b4513\",\"salmon\":\"#fa8072\",\"sandybrown\":\"#f4a460\",\"seagreen\":\"#2e8b57\",\"seashell\":\"#fff5ee\",\"sienna\":\"#a0522d\",\"silver\":\"#c0c0c0\",\"skyblue\":\"#87ceeb\",\"slateblue\":\"#6a5acd\",\"slategray\":\"#708090\",\"snow\":\"#fffafa\",\"springgreen\":\"#00ff7f\",\"steelblue\":\"#4682b4\",\n    \"tan\":\"#d2b48c\",\"teal\":\"#008080\",\"thistle\":\"#d8bfd8\",\"tomato\":\"#ff6347\",\"turquoise\":\"#40e0d0\",\n    \"violet\":\"#ee82ee\",\n    \"wheat\":\"#f5deb3\",\"white\":\"#ffffff\",\"whitesmoke\":\"#f5f5f5\",\n    \"yellow\":\"#ffff00\",\"yellowgreen\":\"#9acd32\"}))\n\n    if (colours.has(colour)) { return colours.get(colour) as string}\n    return colour \n}","\nexport interface BlockStyle {\n    name? : string, \n    fontSize?: number,\n    fontColor?: string,\n    backgroundColor?: string,\n    margin?: { top: number, bottom: number, left: number, right: number },\n    borderRepeat?: number,\n    rx?: number,\n    strokeColor?: string,\n    strokeWidth?: number,\n    hotkey? : string\n}\n\nexport interface DefinedBlockStyle {\n    fontSize: number,\n    fontColor: string,\n    backgroundColor: string,\n    margin: { top: number, bottom: number, left: number, right: number },\n    borderRepeat: number,\n    rx: number,\n    strokeColor: string,\n    strokeWidth: number\n}\n\n\nexport let defaultStyle: DefinedBlockStyle = {\n    fontSize: 24,\n    fontColor: \"red\",\n    backgroundColor: \"green\",\n    margin: { top: 5, bottom: 5, left: 5, right: 5 },\n    borderRepeat: 1,\n    rx: 5,\n    strokeColor: \"#00HH00\",\n    strokeWidth: 1\n}\n\nexport var styleUpdate : BlockStyle\n\nexport function updateDefaultStyle(style : BlockStyle) {\n    styleUpdate = style\n    defaultStyle =  {...defaultStyle, ...style}\n}\n/*\nexport class DiagramStyles {\n    rootStyle: BlockStyle = { fontSize: 24 }\n    constructor() {\n    }\n\n    joinStyle(style1 : DefinedBlockStyle, style2?: BlockStyle) : DefinedBlockStyle {\n        let r : DefinedBlockStyle = {...style1, margin : {...style1.margin}}\n        if (style2) {\n            for (const key in style2) {\n                let value : any = (style2 as any)[key]\n                if (value) (r as any)[key] = value\n            }\n        }\n        return r\n    }\n\n    setRootStyle(style?: BlockStyle) {\n        this.rootStyle = { ...this.defaultStyle, ...style }\n    }\n\n    getStyle(blockStyle?: BlockStyle): BlockStyle {\n\n        return { ... this.defaultStyle, ...blockStyle }\n    }\n\n    getRootStyle(blockStyle?: BlockStyle): BlockStyle {\n        return { ...this.defaultStyle, ...this.rootStyle, ...blockStyle }\n    }\n\n}\nexport const diagramStyles = new DiagramStyles()*/","import React from 'react';\nimport { DiagramBlock } from '../state/DiagramBlock';\nimport { observer } from 'mobx-react'\nimport { DiagramSlotComponent } from './DiagramSlotComponent';\nimport { Vec2d, distance } from '../state/helpers';\nimport { observable, computed, action, autorun, IReactionDisposer } from 'mobx';\nimport { defaultStyle, BlockStyle, DefinedBlockStyle } from '../state/DiagramStyles';\n\n\n\n@observer\nclass BlockImageElement extends React.Component<{ block: DiagramBlock, onSize: (size: Vec2d) => void }> {\n    private myRef = React.createRef<SVGImageElement>()\n\n\n    componentDidMount() {\n        if (this.myRef.current) {\n            let rect = this.myRef.current.getBoundingClientRect()\n            this.props.onSize({ x: rect.width, y: rect.height })\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.myRef.current) {\n            let rect = this.myRef.current.getBoundingClientRect()\n\n            this.props.onSize({ x: rect.width, y: rect.height })\n        }\n    }\n\n    render() {\n        return (this.props.block.image ? <image width=\"100\" ref={this.myRef} xlinkHref={this.props.block.image.image} /> : null)\n    }\n}\n\n\n@observer\nclass ScaledSvgText extends React.Component<{ block: DiagramBlock, style: BlockStyle, onSize: (size: Vec2d) => void }> {\n    size: Vec2d = { x: 0, y: 0 }\n\n    private myRef = React.createRef<SVGTextElement>()\n    constructor(props: any) {\n        super(props)\n    }\n\n\n    componentDidMount() {\n        if (this.myRef.current) {\n            this.size = { x: this.myRef.current.getBBox().width, y: this.myRef.current.getBBox().height }\n            this.props.onSize(this.size)\n\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.myRef.current ) {\n            let size = { x: this.myRef.current.getBBox().width, y: this.myRef.current.getBBox().height }\n            if (distance(this.size, size) > 1) {\n                console.log(`Component did update ${this.size.x} ${size.x} ${this.size.y} ${size.y}`)\n\n                this.props.onSize(size)\n            }\n            this.size = size\n        }\n    }\n\n    render() {\n        let height = this.props.block.rect.height\n        let margin = this.props.style.margin || defaultStyle.margin\n        let textHeight = height - margin.top - margin.bottom\n        let y = margin.top + textHeight / 2\n        return <text fill={this.props.style.fontColor || defaultStyle.fontColor} fontSize={this.props.style.fontSize || defaultStyle.fontSize} ref={this.myRef} style={{ pointerEvents: \"none\", userSelect: \"none\" }} x={this.props.block.rect.width / 2} y={y} dominantBaseline=\"middle\" textAnchor=\"middle\">{this.props.block.name}</text>\n    }\n}\n\n@observer\nclass SvgIconComponent extends React.Component {\n    @observable scale = 1\n    @observable translate : Vec2d = {x: 0, y : 0}\n    private myRef = React.createRef<SVGGElement>()\n\n    componentDidMount() {\n        if (this.myRef && this.myRef.current) {\n            let bbox = this.myRef.current.getBBox();\n            console.log('bbox', bbox)\n            this.translate.x = -bbox.x\n            this.translate.y = -bbox.y\n            this.scale = Math.min(20. / bbox.width, 20. / bbox.height)\n        }\n    }\n\n    render() {\n        return <g ref={this.myRef} transform={` scale(${this.scale}, ${this.scale}) translate(${this.translate.x},${this.translate.y})`}\n        >\n            <path d=\"m 58.39732,66.245535 11.150298,6.047618 4.157739,-9.827379 4.91369,10.394345 13.796132,-1.889882 -11.528274,10.772322 6.425595,13.229167 c -4.787698,-1.448909 -7.11725,-7.433098 -12.473214,-6.803571 -5.177375,0.413433 -7.942629,5.656018 -11.150298,8.504464 L 65.956845,84.955357 52.160714,81.742559 64.633929,77.395833 Z\" style={{fill:\"none\",stroke:\"#000000\"}}/>\n\n        </g>\n    }\n}\n\n\n\n\n@observer\nexport class DiagramBlockComponent extends React.Component<{ block: DiagramBlock, isEdited: boolean, isSelected: boolean, isHovered: boolean, onSelect: (block: DiagramBlock, pos: Vec2d) => void }, {}> {\n    \n\n    dispose? : IReactionDisposer \n\n    constructor(props: any) {\n        super(props)\n        \n    }\n\n    @observable imageSize: Vec2d = { x: 0, y: 0 }\n\n    @observable textSize: Vec2d = { x: 80, y: 20 }\n\n\n    /*renderFrame() {\n        return <>\n            <rect width={this.props.block.rect.width} height={this.props.block.rect.height} fill={this.blockStyle.backgroundColor} style={{ \"stroke\": \"#006600\" }} rx={5} />\n            {this.props.isSelected && <rect x={-3} y={-3} width={this.props.block.rect.width + 6} height={this.props.block.rect.height + 6} fill=\"none\" style={{ \"stroke\": \"#0000FF\", \"strokeWidth\": 2 }} rx={5} />}\n            {this.props.isHovered && <rect x={-3} y={-3} width={this.props.block.rect.width + 6} height={this.props.block.rect.height + 6} fill=\"none\" style={{ \"stroke\": \"#00FF00\", \"strokeWidth\": 2 }} rx={5} />}\n\n\n            {this.props.block.type === \"mmroot\" ? <rect x=\"3\" y=\"3\" width={this.props.block.rect.width - 6} height={this.props.block.rect.height - 6} fill={this.blockStyle.backgroundColor} style={{ \"stroke\": \"#006600\" }} rx={5} /> : null}\n            {!this.props.isEdited ? <ScaledSvgText block={this.props.block} style={this.blockStyle} onSize={this.onTextSize} /> : null\n            }\n\n        </>\n    }*/\n\n    renderFrame() {\n        let blockStyle = this.props.block.style\n        let dx = 5\n        let frames = []\n\n        for (let i = 0; i < (blockStyle.borderRepeat || defaultStyle.borderRepeat); ++i) {\n            frames.push(<rect x={dx *i} y={dx *i} width={this.props.block.rect.width - dx *2 * i } height={this.props.block.rect.height - dx * 2 * i}  strokeWidth={blockStyle.strokeWidth || defaultStyle.strokeWidth} fill={blockStyle.backgroundColor || defaultStyle.backgroundColor} style={{ \"stroke\": blockStyle.strokeColor || defaultStyle.strokeColor }} rx={blockStyle.rx || defaultStyle.rx} />)\n            \n        }\n\n        return <>\n            {frames}\n            {this.props.isSelected && <rect x={-3} y={-3} width={this.props.block.rect.width + 6} height={this.props.block.rect.height + 6} fill=\"none\" style={{ \"stroke\": \"#0000FF\", \"strokeWidth\": 2 }} rx={5} />}\n            {this.props.isHovered && <rect x={-3} y={-3} width={this.props.block.rect.width + 6} height={this.props.block.rect.height + 6} fill=\"none\" style={{ \"stroke\": \"#00FF00\", \"strokeWidth\": 2 }} rx={5} />}\n\n\n        </>\n    }\n\n    render() {\n        if (this.dispose) this.dispose()\n        this.dispose = autorun(() => this.updateRequestedSize())\n        \n        return (\n\n            \n            <g transform={`translate(${this.props.block.rect.x + this.props.block.translate.x},${this.props.block.rect.y + this.props.block.translate.y}) `} onMouseDown={evt => this.onMouseDown(evt)} onClick={evt => this.onClick(evt)} onDoubleClick={evt => this.onDoubleClick(evt)}>\n                {this.renderFrame()}\n                {!this.props.isEdited ? <ScaledSvgText block={this.props.block} style={this.props.block.style} onSize={this.onTextSize} /> : null}s\n                <BlockImageElement block={this.props.block} onSize={this.onImageSize} />\n\n                {this.props.block.slots.map(slot => <DiagramSlotComponent key={slot.key} slot={slot} />)}\n            </g>)\n\n\n    }\n\n    componentWillMount() {\n     if (this.dispose) this.dispose()   \n    }\n    onTextSize = (size: Vec2d) => {\n        this.textSize = size\n        this.updateRequestedSize()\n    }\n    onImageSize = (size: Vec2d) => {\n        this.imageSize = size\n        this.updateRequestedSize()\n    }\n\n    @action\n    updateRequestedSize() {\n        let margin = this.props.block.style.margin || defaultStyle.margin\n        this.props.block.requestedWidth = this.textSize.x + margin.left + margin.right\n        this.props.block.requestedHeight = this.textSize.y + margin.top + margin.bottom\n    }\n\n    @computed get fullSize(): Vec2d {\n        return this.textSize\n    }\n\n\n\n    onMouseDown(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n\n        this.props.onSelect(this.props.block, { x: evt.clientX, y: evt.clientY })\n        evt.stopPropagation()\n    }\n\n    onClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        this.props.block.click()\n        evt.stopPropagation()\n    }\n\n    onDoubleClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        this.props.block.doubleClick()\n    }\n\n}","import React from 'react';\nimport { DiagramButton } from '../../state/DiagramButton';\n\nexport class AddButtonComponent extends React.Component {\n    render() {\n        return <g  >\n\n<g\n       id=\"g3979\"\n       transform=\"translate(-0.10620686,-0.56696429)\">\n      <rect\n         ry=\"1.0444876\"\n         y=\"-9.3742828\"\n         x=\"-9.8492556\"\n         height=\"19.63636\"\n         width=\"19.425177\"\n         id=\"rect3942\"\n         style={{fill:\"white\",stroke:\"#000000\",strokeWidth:\"1\"}} \n         />\n      <path\n         id=\"rect3944\"\n         d=\"m -3.3174074,-7.0890472 c -0.5786464,0 -1.0443792,0.4657354 -1.0443792,1.0443818 v 2.1626565 h -2.1626592 c -0.5786464,0 -1.0443818,0.4657355 -1.0443818,1.0443819 v 6.7313729 c 0,0.5786438 0.4657354,1.0443792 1.0443818,1.0443792 h 2.1626592 v 2.1626592 c 0,0.5786464 0.4657328,1.0443792 1.0443792,1.0443792 h 6.7313729 c 0.5786464,0 1.0443819,-0.4657328 1.0443819,-1.0443792 V 4.9381251 h 2.1626565 c 0.5786464,0 1.0443818,-0.4657354 1.0443818,-1.0443792 V -2.837627 c 0,-0.5786464 -0.4657354,-1.0443819 -1.0443818,-1.0443819 H 4.4583474 v -2.1626565 c 0,-0.5786464 -0.4657355,-1.0443818 -1.0443819,-1.0443818 z\"\n         style={{fill:\"purple\",stroke:\"#000000\",strokeWidth:\"1\"}} \n\n         />\n    </g>\n            \n\n        </g >\n    }\n\n}","import React from 'react';\nimport { DiagramButton } from '../../state/DiagramButton';\n\nexport class RemoveButtonComponent extends React.Component {\n    render() {\n        return <g  >\n\n            <g\n                id=\"g3979\"\n                transform=\"translate(-0.10620686,-0.56696429)\">\n                <rect\n                    ry=\"1.0444876\"\n                    y=\"-9.3742828\"\n                    x=\"-9.8492556\"\n                    height=\"19.63636\"\n                    width=\"19.425177\"\n                    id=\"rect3942\"\n                    style={{ fill: \"white\", stroke: \"#000000\", strokeWidth: \"1\" }}\n                />\n                <rect\n                    style={{ fill: \"white\", stroke: \"#000000\", strokeWidth: \"1\" }}\n\n                    id=\"rect4021\"\n                    width=\"15.485204\"\n                    height=\"8.2242823\"\n                    x=\"-7.7426019\"\n                    y=\"-4.1617403\"\n                    ry=\"0.98811853\" />\n            </g>\n\n\n        </g >\n    }\n\n}","import React from 'react';\nimport { DiagramButton } from '../state/DiagramButton';\nimport { AddButtonComponent } from './buttons/AddButtonComponent';\nimport { RemoveButtonComponent } from './buttons/RemoveButtonComponent';\n\nexport class DiagramButtonComponent extends React.Component<{ button: DiagramButton }> {\n    render() {\n        let element = <rect width={10} height={10} fill={this.props.button.color} ></rect>;\n        switch (this.props.button.icon) {\n            case \"add\":\n                element = <AddButtonComponent />\n                break;\n            case \"remove\":\n                element = <RemoveButtonComponent />\n                break;\n\n        }\n\n        return <g transform={`translate(${this.props.button.position.x},${this.props.button.position.y}) rotate(0)`} onClick={evt => this.onClick(evt)} >\n            {element}\n\n        </g>\n    }\n\n    onClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        \n        this.props.button.click()\n    }\n\n}","import React from 'react';\nimport { DiagramConnection } from '../state/DiagramConnection';\nimport { observer } from 'mobx-react';\n\n@observer\nexport class DiagramConnectionComponent extends React.Component<{ connection: DiagramConnection }> {\n\n    render() {\n        const x1 = this.props.connection.fromPoint.x;\n        const y1 = this.props.connection.fromPoint.y;\n        const x2 = this.props.connection.toPoint.x;\n        const y2 = this.props.connection.toPoint.y;\n        const lineStyle = { stroke: \"rgb(255,0,0)\", strokeWidth: \"2\" ,fill:\"none\" };\n        //return <line style={lineStyle} x1={x1} y1={y1} x2={x2} y2={y2} />\n        return <path style={lineStyle} d={`M ${x1} ${y1} C ${x2} ${y1} ${x1} ${y2} ${x2} ${y2}`}/>\n    }\n\n}","import {Category,CategoryLogger,CategoryServiceFactory,CategoryConfiguration,LogLevel} from \"typescript-logging\";\n \n// Optionally change default settings, in this example set default logging to Info.\n// Without changing configuration, categories will log to Error.\nCategoryServiceFactory.setDefaultConfiguration(new CategoryConfiguration(LogLevel.Info));\n \n\n\n// Create categories, they will autoregister themselves, one category without parent (root) and a child category.\nexport const logMindMap = new Category(\"mindMap\");\nexport const mindMapDragLog = new Category(\"draging\", logMindMap);\nexport const logDiagramBlockLayout = new Category(\"diagramBlockLayout\", logMindMap);\n\nexport const logDigramSceneComponent = new Category(\"DiagramSceneComponent\");\n\n//export const catProdLog = new Category(\"product\", mindMapLog);","import React from 'react';\nimport { DiagramBlockComponent } from './DiagramBlockComponent';\nimport { DiagramBlock } from '../state/DiagramBlock';\nimport { DiagramScene } from '../state/DiagramScene';\nimport { observer } from 'mobx-react';\nimport { Vec2d, distance } from '../state/helpers';\nimport { DiagramButtonComponent } from './DiagramButtonComponet';\nimport { DiagramConnectionComponent } from './DiagramConnectionComponent';\nimport { observable, action } from 'mobx';\nimport { logDigramSceneComponent } from '../../logging/Config';\n\n\n@observer\nexport class DiagramSceneComponent extends React.Component<{ diagramScene: DiagramScene }, {}> {\n\n    x0 : number = 0\n    y0 : number = 0\n    mouseDownPos?: Vec2d\n    selectionBlock?: DiagramBlock\n    @observable hoverBlock? : DiagramBlock \n    private myRef = React.createRef<SVGSVGElement>()\n\n    componentDidMount() {\n        if (this.myRef.current) {\n            let dx = this.myRef.current.getBoundingClientRect().width / 2\n            let dy = this.myRef.current.getBoundingClientRect().height / 2\n            this.props.diagramScene.sceneTranslate.x = dx\n            this.props.diagramScene.sceneTranslate.y = dy\n            this.x0 = this.myRef.current.getBoundingClientRect().left\n            this.y0 = this.myRef.current.getBoundingClientRect().top\n\n        }\n    }\n\n\n    render() {\n        let dx = this.props.diagramScene.sceneTranslate.x + this.props.diagramScene.sceneTranslateDelta.x\n        let dy = this.props.diagramScene.sceneTranslate.y + this.props.diagramScene.sceneTranslateDelta.y\n        return <svg\n            ref={this.myRef}\n            width=\"100%\"\n            height=\"100%\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            onMouseDown={evt => this.onMouseDown(evt)}\n            onMouseMove={evt => this.onMouseMove(evt)}\n            onMouseUp={evt => this.onMouseUp(evt)}\n            onClick={evt => this.onClick(evt)}\n\n        >\n\n            <g transform={`translate(${dx},${dy})`}>\n                {this.props.diagramScene.diagramBlocks.map(block =>\n                    <DiagramBlockComponent key={block.uid} block={block} isSelected={this.props.diagramScene.selectedBlock === block} isHovered={this.hoverBlock === block} isEdited={this.props.diagramScene.editedBlock === block} onSelect={(block, pos) => this.onSelect(block, pos)} />\n                )}\n                {this.props.diagramScene.diagramConnections.map(element =>\n                    <DiagramConnectionComponent key={element.uid} connection={element} />\n                )}\n\n\n                {this.props.diagramScene.activeButtons.map(button => <DiagramButtonComponent key={button.uid} button={button} />)}\n            </g>\n        </svg>\n\n    }\n\n\n    onSelect(block: DiagramBlock, pos: Vec2d) {\n        this.mouseDownPos = this.clientToScene(pos)\n        this.selectionBlock = block\n        this.props.diagramScene.selectedBlock = block\n        this.props.diagramScene.setEditedBlock(undefined)\n\n    }\n\n    @action\n    onMouseDown(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        logDigramSceneComponent.info(\"onMouseDown\")\n        if (this.props.diagramScene.editedBlock) {\n            this.props.diagramScene.setEditedBlock(undefined)\n            this.props.diagramScene.onEdit = true\n        }\n\n        this.mouseDownPos = this.clientToScene({ x: evt.pageX, y: evt.pageY })\n\n    }\n\n\n    onMouseMove(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        if (this.mouseDownPos && this.selectionBlock) {\n            logDigramSceneComponent.info(\"onMouseMove block\")\n            let mousePos = this.clientToScene({ x: evt.pageX, y: evt.pageY })\n            this.selectionBlock.translate = { x: mousePos.x - this.mouseDownPos.x, y: mousePos.y - this.mouseDownPos.y }\n            this.props.diagramScene.activeButtons = []\n\n            this.hoverBlock = undefined\n            for (let block of this.props.diagramScene.diagramBlocks) {\n                if (block != this.selectionBlock) {\n                    let rect = block.rect\n                    if (rect.contains(mousePos)) this.hoverBlock = block\n                } \n            }\n\n        } else if (this.mouseDownPos) {\n            logDigramSceneComponent.info(\"onMouseMove scene\")\n            let mousePos = this.clientToScene({ x: evt.pageX, y: evt.pageY });\n            let dx = mousePos.x - this.mouseDownPos.x\n            let dy = mousePos.y - this.mouseDownPos.y\n            let delta = distance({ x: dx, y: dy })\n            if (delta > 40)\n                this.props.diagramScene.sceneTranslateDelta = { x: dx, y: dy }\n\n        }\n    }\n\n    @action\n    onMouseUp(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        logDigramSceneComponent.info(\"onMouseUp\")\n        this.hoverBlock = undefined\n        if (this.selectionBlock && this.mouseDownPos) {\n            let mousePos = this.clientToScene({ x: evt.pageX, y: evt.pageY })\n            let translate = { x: mousePos.x - this.mouseDownPos.x, y: mousePos.y - this.mouseDownPos.y }\n            let dist = distance(translate)\n            if (dist > 20) {\n\n\n                let position = { x: this.selectionBlock.rect.x + mousePos.x - this.mouseDownPos.x, y: this.selectionBlock.rect.y + mousePos.y - this.mouseDownPos.y, }\n                this.selectionBlock.setPosition(position)\n                this.selectionBlock.dragEnd(mousePos)\n            } else {\n                this.selectionBlock.translate = { x: 0, y: 0 }\n            }\n            this.selectionBlock = undefined\n            this.mouseDownPos = undefined\n\n        } else if (this.mouseDownPos) {\n            let mousePos = this.clientToScene({ x: evt.pageX, y: evt.pageY })\n\n            let dx = mousePos.x - this.mouseDownPos.x\n            let dy = mousePos.y - this.mouseDownPos.y\n            let delta = distance({ x: dx, y: dy })\n            if (delta > 40) {\n\n                this.props.diagramScene.sceneTranslate.x += dx;\n                this.props.diagramScene.sceneTranslate.y += dy;\n            }\n            this.props.diagramScene.sceneTranslateDelta = { x: 0, y: 0 }\n            this.mouseDownPos = undefined\n\n        }\n\n    }\n\n    clientToScene(client: Vec2d): Vec2d {\n        return { x: client.x - this.props.diagramScene.sceneTranslate.x - this.x0, y: client.y - this.props.diagramScene.sceneTranslate.y - this.y0 }\n    }\n\n    onClick(evt: React.MouseEvent<SVGElement, MouseEvent>) {\n        this.props.diagramScene.activeButtons = []\n        //this.props.diagramScene.selectedBlock = undefined\n\n    }\n\n}","import { Vec2d, Rect } from \"./helpers\";\nimport { observable, action, computed } from \"mobx\"\nimport { DiagramConnection } from \"./DiagramConnection\";\nimport { DiagramSlot } from \"./DiagramSlot\";\nimport { DiagramImage } from \"./DiagramImage\";\nimport { BlockStyle } from \"./DiagramStyles\";\n\ntype BlockEvents = \"click\" | \"doubleClick\"| \"dragStart\" | \"dragEnd\" |\n    \"dropBlock\" | \"dropConnection\" |\n    \"overMouse\" | \"overDragBlock\" | \"overDragConnection\" |\n    \"selected\" | \"changeName\" | \"changeRect\";\n\ntype BlockCallback = (block: DiagramBlock) => void\ntype BlockPositionCallback = (block: DiagramBlock, position: Vec2d) => void\ntype ConnectionCallback = (connection: DiagramConnection) => void\n\nclass DiagramBlockCallbacks {\n    clickCallbacks: BlockCallback[] = []\n    doubleClickCallbacks : BlockCallback[] =[] \n    changeRectCallbacks: BlockCallback[] = []\n    dragEndCallbacks: BlockPositionCallback[] = []\n    on(evt: BlockEvents, callback: BlockCallback | ConnectionCallback | BlockPositionCallback) {\n        switch (evt) {\n            case \"click\":\n                this.clickCallbacks.push(callback as BlockCallback)\n                break\n            case \"doubleClick\":\n                this.doubleClickCallbacks.push(callback as BlockCallback)\n                break\n\n            case \"changeRect\":\n                this.changeRectCallbacks.push(callback as BlockCallback)\n                break\n\n            case \"dragEnd\":\n                this.dragEndCallbacks.push(callback as BlockPositionCallback)\n\n        }\n    }\n\n    protected fireClick(block: DiagramBlock) {\n        for (let callback of this.clickCallbacks) callback(block)\n    }\n\n\n    protected fireDoubleClick(block: DiagramBlock) {\n        for (let callback of this.doubleClickCallbacks) callback(block)\n    }\n\n\n    protected fireChangeRect(block: DiagramBlock) {\n        for (let callback of this.changeRectCallbacks) callback(block)\n    }\n\n    protected fireDragEnd(block: DiagramBlock, position: Vec2d) {\n        for (let callback of this.dragEndCallbacks) callback(block, position)\n    }\n}\n\nexport class DiagramBlockStyle {\n    fill : string  = \"white\"\n    stroke : string = \"white\"\n    rx = 5\n    nstroke = 1 \n}\n\n\n\nexport class DiagramBlock extends DiagramBlockCallbacks {\n    uid: string\n    @observable name: string\n    type: string\n    @observable rect: Rect\n    @observable translate: Vec2d\n    @observable slots: DiagramSlot[]\n    @observable debugIdx: number\n    @observable finishedEditing : boolean = true\n    @observable requestedWidth ?: number \n    @observable requestedHeight ?: number \n    @observable image? : DiagramImage \n    @observable imageUrl : string = \"\"\n    @observable style : BlockStyle\n\n    constructor(uid: string, name: string, type: string, slots: DiagramSlot[], rect: Rect,  style?:BlockStyle,image? : DiagramImage) {\n        super()\n        this.uid = uid\n        this.name = name\n        this.type = type\n        this.slots = slots\n        this.rect = rect\n        this.debugIdx = 0\n        this.translate = { x: 0, y: 0 }\n        this.image = image\n        this.style = style || {}\n    }\n\n    @action setPosition(position: Vec2d) {\n        this.translate = { x: 0, y: 0 }\n\n        this.rect.x = position.x\n        this.rect.y = position.y\n        this.fireChangeRect(this)\n    }\n\n    click() { this.fireClick(this) }\n    doubleClick() { this.fireDoubleClick(this) }\n\n    dragEnd(position: Vec2d) { this.fireDragEnd(this, position) }\n\n\n    @computed get name2slot(): Map<string, DiagramSlot> {\n        let name2slot = new Map<string, DiagramSlot>()\n        for (let slot of this.slots) name2slot.set(slot.name, slot)\n        return name2slot\n    }\n\n}\n","import { Vec2d } from \"./helpers\";\n\nexport type DiagramButtonPositionHint = \"topLeft\" | \"topRight\" |\n    \"rightTop\" | \"rightBottom\" |\n    \"bottomLeft\" | \"bottomRight\" |\n    \"leftTop\" | \"leftBottom\"\n\nexport type ButtonIcon  = \"add\" | \"remove\"\n\nexport class DiagramButton {\n    position: Vec2d = { x: 0, y: 0 }\n\n    protected clickCallbacks: (() => void)[] = []\n    \n    constructor(public uid: string, public positionHint: DiagramButtonPositionHint, public icon: ButtonIcon, public color: string, callback?: () => void, ) {\n        if (callback) this.on(\"click\", callback)\n    }\n\n    click() { \n        for (let callback of this.clickCallbacks) callback()    \n    }\n    \n    on(evt: \"click\", callback: () => void) { this.clickCallbacks.push(callback) }\n}","import { DiagramEndpoint } from \"./DiagramEndpoint\";\nimport { Vec2d } from \"./helpers\";\nimport { observable } from \"mobx\";\n\nexport class DiagramConnection {\n    @observable fromPoint : Vec2d  \n    @observable toPoint : Vec2d\n    constructor(public from: DiagramEndpoint, public to: DiagramEndpoint, public type: string) { \n        this.fromPoint = {x : 0, y : 0}\n        this.toPoint = {x : 0, y : 0}\n    }\n\n    get uid() {\n        return `${this.from.blockUid}:${this.from.slot}:${this.to.blockUid}:${this.to.slot}`\n    }\n}\n\n","import { Vec2d } from \"./helpers\";\nimport { observable } from \"mobx\";\n\nexport class DiagramSlot {\n    @observable position: Vec2d\n    constructor(public name: string, public type: string, position: Vec2d = { x: 0, y: 0 }) { this.position = position }\n\n    get key() {\n        return this.name\n    }\n}\n","import { DiagramBlock } from \"../state/DiagramBlock\";\nimport { DiagramButton, DiagramButtonPositionHint } from \"../state/DiagramButton\";\nimport { MapList } from \"../state/helpers\";\n\nexport class DiagramButtonLayout {\n    layoutBlockButtons(block : DiagramBlock, buttons :DiagramButton[]) {\n        let regionButtons: MapList<DiagramButtonPositionHint, DiagramButton> = new MapList()\n\n        for (let button  of buttons) {\n            regionButtons.push(button.positionHint, button)\n        }\n\n        let rect = block.rect\n        let D = 20\n        let x = rect.x + rect.width - D / 2\n        let y = rect.y - D / 2 - D *0.2\n\n        for (let button of regionButtons.get(\"topRight\")) {\n            button.position = {x,y}\n            x -= D * 1.2\n        }\n\n\n    }\n}","import { DiagramScene } from \"./DiagramScene\";\nimport { computed } from \"mobx\";\nimport { DiagramBlock } from \"./DiagramBlock\";\nimport { DiagramConnection } from \"./DiagramConnection\";\nimport { MapList } from \"./helpers\";\nimport { Block } from \"@babel/types\";\nimport { keepAlive } from \"mobx-utils\";\n\nexport class DiagramStructure {\n    constructor(public scene: DiagramScene) {\n        keepAlive(this, \"blocks\")\n        keepAlive(this, \"blockConnections\")\n        keepAlive(this, \"columnBlocks\")\n    }\n\n    @computed get blocks(): Map<string, DiagramBlock> {\n        let result = new Map<string, DiagramBlock>()\n        for (let block of this.scene.diagramBlocks) { result.set(block.uid, block) }\n        return result\n    }\n\n\n    @computed get blockConnections(): { input: MapList<string, DiagramConnection>, output: MapList<string, DiagramConnection> } {\n        let input = new MapList<string, DiagramConnection>()\n        let output = new MapList<string, DiagramConnection>()\n        for (let connection of this.scene.diagramConnections) {\n            input.push(connection.to.blockUid, connection)\n            output.push(connection.from.blockUid, connection)\n        }\n        return { input, output }\n    }\n\n    getOutputSlotConnections(blockUid: string, slot: string): DiagramConnection[] {\n        return this.blockConnections.output.get(blockUid).filter(connection => (connection.from.slot === slot))\n    }\n\n    getInputSlotConnections(blockUid: string, slot: string): DiagramConnection[] {\n        return this.blockConnections.input.get(blockUid).filter(connection => (connection.to.slot === slot))\n    }\n\n    getChildBlocks(blockUid: string): string[] {\n        let childBlocks: string[] = []\n        for (let connection of this.blockConnections.output.get(blockUid)) {\n            childBlocks.push(connection.to.blockUid)\n            childBlocks.push(...this.getChildBlocks(connection.to.blockUid))\n        }\n        return childBlocks\n    }\n\n    getFistChildBlock(block: DiagramBlock, rootDir: 1 | -1) {\n        if (block.type === \"mmroot\") {\n            let connections = this.blockConnections.output.get(block.uid)\n            if (rootDir === 1) connections = connections.filter(connection => connection.from.slot === \"or\")\n            else connections = connections.filter(connection => connection.from.slot === \"ol\")\n            if (connections.length > 0) return this.blocks.get(connections[0].to.blockUid) as DiagramBlock\n\n\n\n        } else {\n            let childBlocks = this.getChildBlocks(block.uid)\n            if (childBlocks.length > 0) return this.blocks.get(childBlocks[0]) as DiagramBlock\n        }\n    }\n\n\n    getParentBlock(block: DiagramBlock) {\n        if (block.type === \"mmroot\") return block\n        else {\n            return this.blocks.get(this.blockConnections.input.get(block.uid)[0].from.blockUid) as DiagramBlock\n        }\n    }\n\n    @computed get columnBlocks(): MapList<number, DiagramBlock> {\n        console.log(\"columnBlock\")\n        let res = new MapList<number, DiagramBlock>()\n        let rootBlock = this.scene.diagramBlocks[0]\n        res.push(0, rootBlock)\n        let outputConnections = this.blockConnections.output.get(rootBlock.uid)\n        let leftConnections = outputConnections.filter(connection => connection.from.slot === \"ol\")\n        for (let connection of leftConnections) {\n            this.updateBlockPosition(res, connection, 0, -1)\n        }\n        let rightConnections = outputConnections.filter(connection => connection.from.slot === \"or\")\n        for (let connection of rightConnections) {\n            this.updateBlockPosition(res, connection, 0, 1)\n        }\n        return res\n    }\n\n    private updateBlockPosition(res: MapList<number, DiagramBlock>, connection: DiagramConnection, columnIdx: number, delta: 1 | -1) {\n        let block = this.blocks.get(connection.to.blockUid) as DiagramBlock\n        res.push(columnIdx + delta, block)\n        for (let connection of this.blockConnections.output.get(block.uid)) {\n            this.updateBlockPosition(res, connection, columnIdx + delta, delta)\n        }\n    }\n\n    public getBlockColumnIdx(block: DiagramBlock) {\n        if (block.type === \"mmroot\") return 0\n        else {\n            let columnIdx = 0\n            while (true) {\n                let connection = this.blockConnections.input.get(block.uid)[0]\n                columnIdx += 1\n                block = this.blocks.get(connection.from.blockUid) as DiagramBlock\n                if (block.type === \"mmroot\") {\n                    if (connection.from.slot === \"ol\") return -columnIdx\n                    else return columnIdx\n                }\n            }\n        }\n    }\n\n    public blockSide(block: DiagramBlock) {\n        if (block.type === \"mmroot\") {\n            return 0\n        }\n        else {\n            let connection = this.blockConnections.input.get(block.uid)[0]\n\n            while (block.type !== \"mmroot\") {\n                connection = this.blockConnections.input.get(block.uid)[0]\n                block = this.blocks.get(connection.from.blockUid) as DiagramBlock\n            }\n\n            if (connection.from.slot === \"ol\") return -1\n            else return 1\n        }\n    }\n\n}","import { DiagramStructure } from \"../state/DiagramStructure\";\nimport { DiagramBlock } from \"../state/DiagramBlock\";\nimport { action } from \"mobx\";\n\nexport class DiagramSlotLayout {\n    constructor(protected diagramStructure: DiagramStructure) {\n\n    }\n\n    @action\n    layout() {\n        let rootBlock = this.diagramStructure.scene.diagramBlocks[0]\n\n        if (rootBlock.type !== \"mmroot\") throw new Error(\"Invalid diagram structure\")\n        rootBlock.slots[0].position = { x: 0, y: rootBlock.rect.height / 2 }\n        rootBlock.slots[1].position = { x: rootBlock.rect.width, y: rootBlock.rect.height / 2 }\n\n        let rightChildBlocks = this.diagramStructure.getOutputSlotConnections(rootBlock.uid, \"or\")\n        let rightBlocks: string[] = []\n        for (let block of rightChildBlocks) {\n            rightBlocks.push(block.to.blockUid)\n            rightBlocks.push(...this.diagramStructure.getChildBlocks(block.to.blockUid))\n        }\n        let leftChildBlocks = this.diagramStructure.getOutputSlotConnections(rootBlock.uid, \"ol\")\n        let leftBlocks: string[] = []\n        for (let block of leftChildBlocks) {\n            leftBlocks.push(block.to.blockUid)\n            leftBlocks.push(...this.diagramStructure.getChildBlocks(block.to.blockUid))\n            //leftBlocks = leftBlocks.concat(,this.diagramData.getChildBlocks(block.toEndpoint.block))\n        }\n\n        for (let blockUid of rightBlocks) {\n            let block = this.diagramStructure.blocks.get(blockUid) as DiagramBlock\n            block.slots[0].position = { x: 0, y: block.rect.height / 2 }\n            block.slots[1].position = { x: block.rect.width, y: block.rect.height / 2 }\n        }\n\n        for (let blockUid of leftBlocks) {\n            let block = this.diagramStructure.blocks.get(blockUid) as DiagramBlock\n            block.slots[0].position = { x: block.rect.width, y: block.rect.height / 2 }\n            block.slots[1].position = { x: 0, y: block.rect.height / 2 }\n        }\n\n\n    }\n}","import { DiagramStructure } from \"../state/DiagramStructure\";\nimport { DiagramBlock } from \"../state/DiagramBlock\";\nimport { Vec2d } from \"../state/helpers\";\nimport { DiagramSlot } from \"../state/DiagramSlot\";\nimport { autorun, IReactionDisposer } from \"mobx\";\nimport { DiagramConnection } from \"../state/DiagramConnection\";\n\nexport class DiagramConnectionLayout {\n    constructor(private diagramStructure: DiagramStructure) { }\n    disposers : IReactionDisposer[] = []\n\n    layout() {\n        for (let disposer of this.disposers) disposer()\n\n        for (let connection of this.diagramStructure.scene.diagramConnections) {\n            let fromBlock = this.diagramStructure.blocks.get(connection.from.blockUid) as DiagramBlock\n            let toBlock = this.diagramStructure.blocks.get(connection.to.blockUid) as DiagramBlock\n            this.disposers.push(autorun(() => this.setConnectionPosition(connection, fromBlock, toBlock), {delay : 30 }))\n        }\n    }\n\n    setConnectionPosition(connection: DiagramConnection, fromBlock: DiagramBlock, toBlock: DiagramBlock) {\n        let fromPosition: Vec2d = (fromBlock.name2slot.get(connection.from.slot) as DiagramSlot).position\n        let toPosition: Vec2d = (toBlock.name2slot.get(connection.to.slot) as DiagramSlot).position\n        connection.fromPoint = { x: fromPosition.x + fromBlock.rect.x + fromBlock.translate.x, y: fromPosition.y + fromBlock.rect.y + fromBlock.translate.y }\n        connection.toPoint = { x: toPosition.x + toBlock.rect.x + toBlock.translate.x, y: toPosition.y + toBlock.rect.y+ toBlock.translate.y }\n    }\n}","import { DiagramStructure } from \"../state/DiagramStructure\";\nimport { MapList, Vec2d, Rect } from \"../state/helpers\";\nimport { DiagramBlock } from \"../state/DiagramBlock\";\nimport { logDiagramBlockLayout } from \"../../logging/Config\";\nlet defaultMMLayoutParams = {\n    hMargin: 30,\n    vMargin: 10\n}\n\nexport class DiagramBlockLayout {\n    blockColumns: Map<string, number> = new Map();\n    columnBlocks: MapList<number, string> = new MapList();\n    childShift: Map<string, number[]> = new Map()\n    blockHeight: Map<string, number> = new Map()\n    blockChildWidth: Map<string, number> = new Map()\n    columnWidth: Map<number, number> = new Map()\n    columnCenter: Map<number, number> = new Map()\n    blockPosition: Map<string, Vec2d> = new Map()\n\n    constructor(private diagramStructure: DiagramStructure, public parameters = defaultMMLayoutParams) { }\n\n\n\n    layoutColumns() {\n        if (!this.diagramStructure) throw new Error(\"Diagram data not defined\")\n        let blocks = this.diagramStructure.scene.diagramBlocks;\n        this.blockColumns = new Map()\n        this.columnBlocks = new MapList()\n        let inputConnections = this.diagramStructure.blockConnections.input\n        for (let i = 0; i < blocks.length; ++i) {\n            if (i === 0) {\n                this.blockColumns.set(blocks[i].uid, 0)\n                this.columnBlocks.push(i, blocks[i].uid)\n                if (!inputConnections.empty(blocks[i].uid)) {\n                    throw new Error(\"Invalid mm diagram blocks structure (first block must be root block - no input connections)\")\n                }\n            } else {\n                let inputBlockConnections = inputConnections.get(blocks[i].uid)\n                if (inputBlockConnections.length !== 1) {\n                    throw new Error(\"Invalid mm diagram blocks structure (each block except root must have exactly one input connection )\")\n                }\n\n                let oldColumn = this.blockColumns.get(inputBlockConnections[0].from.blockUid)\n                if (oldColumn === undefined) {\n                    throw new Error(\"Invalid mm diagram blocks structure (parent block must preceed child block)\")\n                } else {\n                    let newColumn = oldColumn\n                    if (newColumn === 0) {\n                        if (inputBlockConnections[0].from.slot === \"or\") {\n                            newColumn += 1\n                        } else {\n                            newColumn -= 1\n                        }\n                    } else if (newColumn > 0) newColumn += 1\n                    else if (newColumn < 0) newColumn -= 1\n                    this.blockColumns.set(blocks[i].uid, newColumn)\n                    this.columnBlocks.push(newColumn, blocks[i].uid)\n                }\n            }\n        }\n    }\n\n\n\n    layout() {\n        let { input, output } = this.diagramStructure.blockConnections\n\n        this.layoutColumns()\n\n        let columns = Array.from(this.columnBlocks.keys()).sort((a, b) => (a - b))\n        let firstColumn = columns[0]\n        let lastColumn = columns[columns.length - 1]\n\n        for (let column = firstColumn; column <= lastColumn; ++column) {\n            let maxWidth = 0\n            for (let block of this.columnBlocks.get(column) as string[]) {\n                maxWidth = Math.max(maxWidth, (this.diagramStructure.blocks.get(block) as DiagramBlock).rect.width)\n            }\n            this.columnWidth.set(column, maxWidth)\n        }\n\n        let x = 0\n        this.columnCenter.set(0, 0)\n        for (let column = 1; column <= lastColumn; ++column) {\n            let width = this.columnWidth.get(column - 1) as number\n            let width1 = this.columnWidth.get(column) as number\n            x = x + width / 2 + this.parameters.hMargin + width1 / 2\n            this.columnCenter.set(column, x)\n        }\n        x = 0\n\n        for (let column = -1; column >= firstColumn; --column) {\n            let width = this.columnWidth.get(column + 1) as number\n            let width1 = this.columnWidth.get(column) as number\n            x = x - width / 2 - this.parameters.hMargin - width1 / 2\n            this.columnCenter.set(column, x)\n        }\n        let rootBlock = this.diagramStructure.scene.diagramBlocks[0]\n        if (input.get(rootBlock.uid).length > 0) {\n            throw new Error(\"Invalid diagram structure, root block has input connections\")\n        }\n\n        for (let connection of output.get(rootBlock.uid)) {\n            this.updateChildHeight(connection.to.blockUid)\n        }\n\n        this.blockPosition.set(rootBlock.uid, { x: 0, y: 0 })\n\n\n        this.updateChildPositions(1, this.columnBlocks.get(1), { x: 0, y: 0 })\n        this.updateChildPositions(-1, this.columnBlocks.get(-1), { x: 0, y: 0 })\n\n        for (let block of this.diagramStructure.scene.diagramBlocks) {\n            let position = this.blockPosition.get(block.uid) as Vec2d\n            block.rect = new Rect(position.x - block.rect.width / 2,  position.y - block.rect.height / 2, block.rect.width, block.rect.height)\n            \n\n        }\n    }\n\n    updateChildPositions(column: number, blockUids: string[], parentPos: Vec2d) {\n        if (!this.diagramStructure) throw new Error(\"Diagram data not defined\")\n        let totalHeight = 0\n        for (let blockUid of blockUids) {\n            let height = this.blockHeight.get(blockUid) as number\n            totalHeight += height\n        }\n        totalHeight += (blockUids.length - 1) * this.parameters.vMargin;\n        let y = parentPos.y - totalHeight / 2\n        let x = this.columnCenter.get(column) as number\n        if (column > 0) column += 1\n        else column -= 1\n        for (let blockUid of blockUids) {\n            let height = this.blockHeight.get(blockUid) as number\n            let pos = { x, y: y + height / 2 }\n            this.blockPosition.set(blockUid, pos)\n            let childBlockUids = this.diagramStructure.blockConnections.output.get(blockUid).map(connection => connection.to.blockUid)\n            this.updateChildPositions(column, childBlockUids, pos)\n            y += height + this.parameters.vMargin\n        }\n\n    }\n    updateChildHeight(blockUid: string) {\n        let block = this.diagramStructure.blocks.get(blockUid) as DiagramBlock\n        let outputConnections = this.diagramStructure.blockConnections.output.get(blockUid)\n        let childrenHeight = 0\n        for (let connection of outputConnections) {\n            childrenHeight += this.updateChildHeight(connection.to.blockUid)\n        }\n        childrenHeight += this.parameters.vMargin * (outputConnections.length - 1)\n        let blockHeight = Math.max(childrenHeight, block.rect.height)\n        this.blockHeight.set(blockUid, blockHeight)\n        return blockHeight\n    }\n\n    getBlockColumn(block: string): number {\n        return this.blockColumns.get(block) as number\n    }\n\n\n    getBlocks(pos: Vec2d): DiagramBlock[] {\n        let res: DiagramBlock[] = []\n        for (let block of this.diagramStructure.scene.diagramBlocks) {\n            let rect = block.rect\n            if ((pos.x > rect.x) && (pos.x < rect.x + rect.width) &&\n                (pos.y > rect.y) && (pos.y < rect.y + rect.height)) res.push(block)\n        }\n\n        return res\n    }\n\n    getChildIdx(blockUid: string, parentUid: string, y: number): [number, number[]] {\n        if (!this.diagramStructure) throw new Error(\"Diagram data not defined\")\n        let uids: string[] = []\n        let outputConnections = this.diagramStructure.blockConnections.output\n        for (let connection of outputConnections.get(parentUid)) {\n            uids.push(connection.to.blockUid)\n        }\n\n        uids = uids.filter(uid => (blockUid !== uid))\n        logDiagramBlockLayout.info(`Found child uids ${uids}`)\n\n        let blocks: DiagramBlock[] = uids.map(uid => this.diagramStructure.blocks.get(uid) as DiagramBlock)\n\n\n\n\n\n        let blockIdxs: number[] = blocks.map(block => this.diagramStructure.scene.diagramBlocks.indexOf(block)).sort((a, b) => a - b);\n        let data = blockIdxs.map(blockIdx => [blockIdx, this.diagramStructure.scene.diagramBlocks[blockIdx].rect.y, this.diagramStructure.scene.diagramBlocks[blockIdx].rect.height])\n        logDiagramBlockLayout.info(() => `getChildIdx block rects ${data}`)\n        let i = 0;\n        for (let idx of blockIdxs) {\n            let block = this.diagramStructure.scene.diagramBlocks[idx]\n            let rect = block.rect\n            let yc = rect.y + rect.height / 2\n            if (y < yc) break\n            i++\n        }\n        return [i, blockIdxs]\n    }\n\n    getColumnIdx(xp: number): number | null {\n        let maxColumnIdx: number = Math.max(...Array.from(this.columnWidth.keys()))\n        let minColumnIdx: number = Math.min(...Array.from(this.columnWidth.keys()))\n        let x0 = - (this.columnWidth.get(0) as number) / 2\n        if (xp >= x0) {\n\n            for (let columnIdx = 0; columnIdx <= maxColumnIdx; ++columnIdx) {\n                x0 += this.columnWidth.get(columnIdx) as number\n                if (xp < x0) return columnIdx\n                x0 += this.parameters.hMargin\n            }\n            return null\n        }\n        else {\n            for (let columnIdx = -1; columnIdx >= minColumnIdx; --columnIdx) {\n                x0 -= this.columnWidth.get(columnIdx) as number\n                if (xp > x0) return columnIdx\n                x0 -= this.parameters.hMargin\n            }\n            return null\n        }\n    }\n\n\n}","import { DiagramBlock } from \"./DiagramBlock\";\nimport { observable, action, autorun, toJS, computed } from \"mobx\";\nimport { DiagramButtonLayout } from \"../layout/DiagramButtonLayout\";\nimport { DiagramButton } from \"./DiagramButton\";\nimport { DiagramConnection } from \"./DiagramConnection\";\nimport { DiagramStructure } from \"./DiagramStructure\";\nimport { DiagramSlotLayout } from \"../layout/DiagramSlotLayout\";\nimport { DiagramConnectionLayout } from \"../layout/DiagramConnectionLayout\";\nimport { DiagramBlockLayout } from \"../layout/DiagramBlockLayout\";\nimport { Vec2d } from \"./helpers\";\nimport { DiagramImage } from \"./DiagramImage\";\nimport { BlockStyle } from \"./DiagramStyles\";\n\n\nexport class DiagramScene {\n    @observable diagramBlocks: DiagramBlock[]\n    @observable diagramConnections: DiagramConnection[]\n    @observable activeButtons: DiagramButton[] = []\n    @observable private _editedBlock?: DiagramBlock\n    @observable private _selectedBlock?: DiagramBlock\n    @observable private _previousSelection?: DiagramBlock\n\n    @observable onEdit: boolean = false\n    @observable structureChanging: boolean = false\n    @observable sceneTranslate: Vec2d = { x: 512, y: 500 }\n    @observable sceneTranslateDelta: Vec2d = { x: 0, y: 0 }\n    @observable image?: DiagramImage\n\n    diagramStructure: DiagramStructure\n\n    buttonLayout = new DiagramButtonLayout()\n    slotLayout: DiagramSlotLayout\n    blockLayout: DiagramBlockLayout\n    connectionLayout: DiagramConnectionLayout\n    private _previouseName: string = ''\n    oldEditedBlock?: DiagramBlock\n    constructor(diagramBlocks: DiagramBlock[] = [], diagramConnections: DiagramConnection[] = []) {\n        this.diagramBlocks = diagramBlocks\n        this.diagramConnections = diagramConnections\n        this.diagramStructure = new DiagramStructure(this)\n        this.slotLayout = new DiagramSlotLayout(this.diagramStructure)\n        this.blockLayout = new DiagramBlockLayout(this.diagramStructure)\n        this.connectionLayout = new DiagramConnectionLayout(this.diagramStructure)\n        autorun(() => {\n            let changed = false\n            for (let block of this.diagramBlocks) {\n                if (block.requestedWidth && block.requestedHeight && block.finishedEditing && ((block.rect.width != block.requestedWidth) || ((block.rect.height != block.requestedHeight)))) {\n                    block.rect.width = block.requestedWidth\n                    block.rect.height = block.requestedHeight\n\n                    changed = true\n                }\n            }\n            if (changed) this.layout()\n        }, { name: \"asd\" })\n\n    }\n\n    @computed get editedBlock() { return this._editedBlock }\n    @computed get selectedBlock() { return this._selectedBlock }\n    setEditedBlock(block?: DiagramBlock, cancel = false) {\n\n        if (this._editedBlock && this._editedBlock.requestedWidth && this._editedBlock.requestedWidth != this._editedBlock.rect.width) {\n            this._editedBlock.finishedEditing = true\n        }\n        if (block !== undefined) { this._previouseName = block.name }\n        if (cancel && this._editedBlock) { this._editedBlock.name = this._previouseName }\n        this._editedBlock = block\n\n    }\n\n    set selectedBlock(block: DiagramBlock | undefined) {\n        if (block != this._selectedBlock) {\n\n\n            if (block == undefined) {\n                this._selectedBlock = this._previousSelection\n            } else {\n                this._previousSelection = this._selectedBlock\n\n                this._selectedBlock = block\n            }\n            console.log(\"select block\", block, this._previousSelection)\n\n        }\n    }\n\n    @action\n    setStyle(style?: BlockStyle) {\n        if (this._selectedBlock) {\n            if (style) {\n                this._selectedBlock.style = { ...this._selectedBlock.style, ...style }\n\n\n            }\n            else {\n                this._selectedBlock.style = {}\n            }\n            this.onEdit = true\n\n        }\n\n    }\n\n\n    showBlockButtons(block: DiagramBlock, buttons: DiagramButton[]) {\n        //setting button positions\n        this.buttonLayout.layoutBlockButtons(block, buttons)\n        this.activeButtons = buttons\n        for (let button of buttons) { button.on(\"click\", () => { this.activeButtons = [] }) }\n    }\n\n    @action layout() {\n        if (this.diagramBlocks.length > 0) {\n\n            this.slotLayout.layout()\n            this.blockLayout.layout()\n            this.connectionLayout.layout()\n        }\n\n    }\n    @action up(): void {\n        if (this.selectedBlock) {\n            let columnIdx = this.diagramStructure.getBlockColumnIdx(this.selectedBlock)\n            let blocks = this.diagramStructure.columnBlocks.get(columnIdx)\n            let blockIdx = blocks.indexOf(this.selectedBlock)\n            if (blockIdx > 0) this.selectedBlock = blocks[blockIdx - 1]\n        }\n    }\n    @action down(): void {\n        if (this.selectedBlock) {\n            let columnIdx = this.diagramStructure.getBlockColumnIdx(this.selectedBlock)\n            let blocks = this.diagramStructure.columnBlocks.get(columnIdx)\n            let blockIdx = blocks.indexOf(this.selectedBlock)\n            if (blockIdx < blocks.length - 1) this.selectedBlock = blocks[blockIdx + 1]\n        }\n    }\n    @action left(): void {\n        if (this.selectedBlock) {\n            let side = this.diagramStructure.blockSide(this.selectedBlock)\n            if (side === 1) {\n                this.selectParent()\n            } else {\n                this.selectChild(-1)\n            }\n        }\n\n    }\n    @action right(): void {\n        if (this.selectedBlock) {\n            let side = this.diagramStructure.blockSide(this.selectedBlock)\n\n            if (side === -1) {\n                this.selectParent()\n            } else {\n                this.selectChild(1)\n            }\n        }\n    }\n\n    @action edit() {\n        if (this.selectedBlock) {\n            this.setEditedBlock(this.selectedBlock)\n        }\n    }\n\n\n    selectParent() {\n        if (this.selectedBlock) {\n            this.selectedBlock = this.diagramStructure.getParentBlock(this.selectedBlock)\n        }\n    }\n\n    selectChild(rootDir: 1 | -1) {\n        if (this.selectedBlock) {\n            let childBlock = this.diagramStructure.getFistChildBlock(this.selectedBlock, rootDir)\n\n            if (childBlock)\n                this.selectedBlock = childBlock\n        }\n    }\n\n\n\n}","import { DiagramScene } from \"../state/DiagramScene\";\nimport { DiagramBlock } from \"../state/DiagramBlock\";\nimport { DiagramSlot } from \"../state/DiagramSlot\";\nimport { uuidv4, Rect } from \"../state/helpers\";\nimport { DiagramConnection } from \"../state/DiagramConnection\";\nimport { BlockStyle, updateDefaultStyle, styleUpdate } from \"../state/DiagramStyles\";\nimport { toJS } from \"mobx\";\n\n\ninterface DiagramBlockJSON {\n    name: string,\n    children?: DiagramBlockJSON[],\n    style? : BlockStyle\n}\n\nexport interface DiagramSceneJSON {\n    root: {\n        name: string,\n        children?: {\n            left?: DiagramBlockJSON[],\n            right?: DiagramBlockJSON[]\n        },\n        style? : BlockStyle\n        \n    },\n    defaultStyle? : BlockStyle\n}\n\nexport class DiagramConvert {\n    static fromJSON(json: DiagramSceneJSON): DiagramScene {\n        let scene = new DiagramScene()\n        let rootBlock = new DiagramBlock(uuidv4(), json.root.name, \"mmroot\", [new DiagramSlot(\"ol\", \"o\"), new DiagramSlot(\"or\", \"o\")], new Rect(0,0,200,30), json.root.style)\n\n        scene.diagramBlocks.push(rootBlock)\n        if (json.root.children && json.root.children.left) {\n            this.addChildBlocksFromJson(json.root.children.left, scene, rootBlock, true)\n        }\n        if (json.root.children && json.root.children.right) {\n            this.addChildBlocksFromJson(json.root.children.right, scene, rootBlock, false)\n        }\n        if (json.defaultStyle) {\n            updateDefaultStyle(json.defaultStyle)\n        }\n\n        return scene\n    }\n\n    static addChildBlocksFromJson(jsonBlocks: DiagramBlockJSON[], scene: DiagramScene, parentBlock: DiagramBlock, left?: boolean) {\n        for (let jsonBlock of jsonBlocks) {\n            let block = new DiagramBlock(uuidv4(), jsonBlock.name, \"mm\", [new DiagramSlot(\"i\", \"i\"), new DiagramSlot(\"o\", \"o\")], new Rect(0,0,100,30), jsonBlock.style)\n            scene.diagramBlocks.push(block)\n            if (parentBlock.type == \"mmroot\") {\n                if (left) scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: 'ol' }, { blockUid: block.uid, slot: \"i\" }, \"mm\"))\n                else scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: 'or' }, { blockUid: block.uid, slot: \"i\" }, \"mm\"))\n            } else {\n                scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: 'o' }, { blockUid: block.uid, slot: \"i\" }, \"mm\"))\n            }\n\n            if (jsonBlock.children)\n                this.addChildBlocksFromJson(jsonBlock.children, scene, block)\n\n        }\n\n    }\n\n    static toJSON(scene: DiagramScene): DiagramSceneJSON {\n        let rootBlock = scene.diagramBlocks[0]\n        let result: DiagramSceneJSON = {\n            root: { name: rootBlock.name , style : toJS(rootBlock.style)},\n            \n            defaultStyle : styleUpdate\n            \n        }\n        let leftConnections = scene.diagramStructure.getOutputSlotConnections(rootBlock.uid, \"ol\")\n        if (leftConnections.length > 0) {\n            result.root.children = { left: this.addChildBlocksFromScene(leftConnections, scene) }\n        }\n        let rightConnections = scene.diagramStructure.getOutputSlotConnections(rootBlock.uid, \"or\")\n        if (rightConnections.length > 0) {\n            if (result.root.children) result.root.children.right = this.addChildBlocksFromScene(rightConnections, scene)\n            else result.root.children = { right: this.addChildBlocksFromScene(rightConnections, scene) }\n        }\n        return result\n    }\n\n    static addChildBlocksFromScene(connections: DiagramConnection[], scene: DiagramScene): DiagramBlockJSON[] {\n        let res: DiagramBlockJSON[] = []\n        for (let connection of connections) {\n            let block = scene.diagramStructure.blocks.get(connection.to.blockUid) as DiagramBlock;\n            let newBlock: DiagramBlockJSON = { name: block.name, style :toJS( block.style) }\n            let connections = scene.diagramStructure.getOutputSlotConnections(block.uid, \"o\")\n            if (connections.length > 0) {\n                newBlock.children = this.addChildBlocksFromScene(connections, scene)\n            }\n            res.push(newBlock)\n        }\n        return res\n\n    }\n}","import React, { Component } from 'react';\nimport { DiagramScene } from '../state/DiagramScene';\nimport styled, { StyledComponent } from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { Rect } from '../state/helpers';\nimport { DiagramBlock } from '../state/DiagramBlock';\nimport { action } from 'mobx';\n\n\nconst EditPosition = styled.div<{ rect: Rect }>`\n    position:absolute;\n    left :${p => p.rect.x}px;\n    top : ${p => p.rect.y}px;\n    width : 100px;\n    height : 30px;\n`\n\nconst MyInput = styled.input`\nwidth: 80%;\nheight: 60%;\nmargin-left: 7%;\nmargin-top:3px;\n`\n\n@observer\nclass MyComponent extends React.Component<{ block: DiagramBlock, onKeyDown: (evt: React.KeyboardEvent<HTMLInputElement>) => void }> {\n\n    private myRef = React.createRef<HTMLInputElement>()\n    focusOut = false\n    constructor(props: any) {\n        super(props)\n    }\n\n    componentDidMount() {\n        this.props.block.finishedEditing = false\n        if (this.myRef.current) {\n            this.myRef.current.focus()\n            this.myRef.current.setSelectionRange(0,this.props.block.name.length)\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.block.finishedEditing = true\n    }\n    handleBlur = (e:React.FocusEvent<HTMLInputElement>) => {\n        if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n            this.props.block.name = e.target.value\n            this.focusOut = true\n        }\n    }\n\n    render() {\n        \n        return (<MyInput ref={this.myRef} type=\"text\" value={this.props.block.name} onFocus={evt=>{this.focusOut = false}} onBlur={evt=> this.handleBlur(evt)} onChange={evt => { if(!this.focusOut) this.props.block.name = evt.target.value; }} onKeyDown={this.props.onKeyDown} />)\n    }\n}\n\n@observer\nexport class DiagramEditComponent extends React.Component<{ scene: DiagramScene }> {\n\n    render() {\n        if (this.props.scene.editedBlock) {\n            let rect = Rect.copy( this.props.scene.editedBlock.rect )\n            rect.x += this.props.scene.sceneTranslate.x\n            rect.y += this.props.scene.sceneTranslate.y\n\n            return <EditPosition rect={rect}><MyComponent block={this.props.scene.editedBlock} onKeyDown={(evt) => this.handleKeyDown(evt)} /></EditPosition>\n        }\n        else {\n            return null\n        }\n\n    }\n    @action\n    private handleKeyDown(evt: React.KeyboardEvent<HTMLInputElement>) {\n        if ((this.props.scene.editedBlock) && (evt.key === \"Enter\")) {\n            this.props.scene.setEditedBlock(undefined)\n            this.props.scene.onEdit = true\n            this.props.scene.activeButtons = [] \n        }\n    }\n\n}","import React, { useRef } from 'react';\n\ntype SelectProps = {\n    options: string[]\n    onChange(value : String) : void\n    \n}\n\nexport const SelectComponent: React.FC<SelectProps> = (props: SelectProps) => {\n    const selectRef = useRef<HTMLSelectElement>(null);\n\n    const onChange = (value: string) => {\n        if (selectRef && selectRef.current) { selectRef.current.selectedIndex = 0}\n        props.onChange(value)\n    }\n\n    return <select ref={selectRef} onChange={evt => onChange(evt.target.value)}>{props.options.map(op => <option key={op}>{op}</option>)}</select>;\n}\n","import React from 'react';\nimport styled from 'styled-components'\nimport { DiagramSceneComponent } from '../lib/component/DiagramSceneComponent';\nimport { DiagramScene } from '../lib/state/DiagramScene';\nimport { DiagramBlock } from '../lib/state/DiagramBlock';\nimport { DiagramButton, ButtonIcon } from '../lib/state/DiagramButton';\nimport { uuidv4, Vec2d, removeItems, Rect, colourNameToHex } from '../lib/state/helpers';\nimport { DiagramConnection } from '../lib/state/DiagramConnection';\nimport { DiagramSlot as Slot, DiagramSlot } from '../lib/state/DiagramSlot';\nimport { action, autorun, observable } from 'mobx';\nimport { DiagramConvert, DiagramSceneJSON } from '../lib/convert/DiagramConvert';\nimport { logMindMap, mindMapDragLog } from '../logging/Config';\nimport { DiagramEditComponent } from '../lib/component/DiagramEditComponent';\nimport { observer } from 'mobx-react';\nimport { DiagramImage } from '../lib/state/DiagramImage';\nimport { BlockStyle, defaultStyle } from '../lib/state/DiagramStyles';\nimport { SelectComponent } from './SelectComponent';\n\nconst MM = styled.div`\n    position:absolute;\n    width : 100%;\n    height : 100%;\n`\n\n\n\n\n@observer\nexport class MindMapComponent extends React.Component<{ scene: DiagramScene, vscode?: any, jsonDiagram?: DiagramSceneJSON, image?: DiagramImage, styles: BlockStyle[] }>  {\n    @observable diagramScene: DiagramScene\n    addedBlock?: DiagramBlock\n    vscode?: any\n    private mainRef = React.createRef<HTMLDivElement>()\n    private selectRef = React.createRef<HTMLSelectElement>()\n    @observable styles = new Map<string, BlockStyle>()\n    fontsSizes = [8, 10, 12, 14, 16, 18, 22, 26, 32, 36, 40]\n    strokeSize = [1,2,3,4,5,6]\n    margins = [5,10,15,20,30,40,50]\n    constructor(props: any) {\n        super(props)\n        this.vscode = this.props.vscode\n        //if (this.props.jsonDiagram) {\n        if (false) {\n            //this.diagramScene = DiagramConvert.fromJSON(this.props.jsonDiagram)\n        } else {\n            this.diagramScene = this.props.scene\n            if (this.diagramScene.diagramBlocks.length === 0) {\n                let rootBlock = new DiagramBlock(uuidv4(), \"Enter diagram name\", \"mmroot\", [new DiagramSlot(\"ol\", \"o\"), new DiagramSlot(\"or\", \"o\")], new Rect(0, 0, 100, 30))\n                this.diagramScene.diagramBlocks.push(rootBlock)\n            }\n        }\n\n        for (let style of this.props.styles) {\n            if (style.name) {\n                this.styles.set(style.name, style);\n            }\n        }\n\n        this.addCallbacks(this.diagramScene.diagramBlocks);\n        this.diagramScene.layout()\n        window.addEventListener('message', event => {\n            const message = event.data; // The JSON data our extension sent\n            switch (message.command) {\n                case \"setJsonDocument\":\n                    logMindMap.info(\"setJsonDocument\", message.document)\n                    let doc: DiagramSceneJSON = message.document\n                    this.vscode.setState(doc)\n                    this.diagramScene = DiagramConvert.fromJSON(doc)\n                    this.diagramScene.layout()\n                    this.addCallbacks(this.diagramScene.diagramBlocks);\n                    this.selectRootElement();\n                    this.focus()\n                    break\n                case \"addChild\":\n                    logMindMap.info(\"addChild message\")\n                    if (this.diagramScene.selectedBlock) {\n                        if (this.diagramScene.editedBlock) this.diagramScene.setEditedBlock(undefined)\n                        this.addBlock(this.diagramScene.selectedBlock)\n                    }\n                    break\n                case \"addSibling\":\n                    logMindMap.info(\"addSibling message\")\n                    if (this.diagramScene.selectedBlock) {\n                        if (this.diagramScene.editedBlock) this.diagramScene.setEditedBlock(undefined)\n                        this.addSibling(this.diagramScene.selectedBlock)\n                    }\n                    break\n\n                case \"remove\":\n                    logMindMap.info(\"removeBlock message\")\n                    if (this.diagramScene.selectedBlock) {\n                        if (this.diagramScene.editedBlock) this.diagramScene.setEditedBlock(undefined)\n                        this.removeBlock(this.diagramScene.selectedBlock)\n                    }\n                    break\n                case \"moveLeft\":\n                    logMindMap.info(\"moveLeft message\")\n                    this.diagramScene.left()\n                    break\n                case \"moveRight\":\n                    logMindMap.info(\"moveRight message\")\n                    this.diagramScene.right()\n                    break\n                case \"moveUp\":\n                    logMindMap.info(\"moveUp message\")\n                    this.diagramScene.up()\n                    break\n                case \"moveDown\":\n                    logMindMap.info(\"moveDown message\")\n                    this.diagramScene.down()\n                    break\n                case \"cancel\":\n                    logMindMap.info(\"cancel message\")\n                    this.cancel()\n                    break\n                case \"edit\":\n                    logMindMap.info(\"edit message\")\n                    this.diagramScene.edit()\n                    break\n\n                case \"setStyles\":\n                    logMindMap.info(\"setStyles\")\n                    this.styles.clear()\n                    for (let style of message.styles) {\n                        if (style.name) {\n                            this.styles.set(style.name, style);\n                        }\n                    }\n                    break\n                case \"focus\":\n                    logMindMap.info(\"focus\")\n                    this.focus()\n                    break;\n            }\n\n        });\n\n        autorun(() => {\n            if (this.diagramScene.onEdit && !this.diagramScene.editedBlock) {\n                if (this.vscode) {\n                    let jsonDiagram = DiagramConvert.toJSON(this.diagramScene)\n\n                    this.vscode.postMessage({ message: \"setDocument\", document: jsonDiagram })\n                    this.vscode.setState(jsonDiagram)\n\n                }\n                this.diagramScene.onEdit = false\n                this.addedBlock = undefined\n            }\n        })\n    }\n\n    private addCallbacks(blocks: DiagramBlock[]) {\n        for (let block of blocks) {\n            block.on(\"click\", (block: DiagramBlock) => {\n                let addButton = new DiagramButton(\"addB\", \"topRight\", \"add\", \"red\", () => {\n                    this.addBlock(block);\n                });\n\n                let removeButton = new DiagramButton(\"removeB\", \"topRight\", \"remove\", \"red\", () => {\n                    this.removeBlock(block);\n                });\n\n                this.diagramScene.showBlockButtons(block, [addButton, removeButton]);\n            });\n            block.on(\"dragEnd\", (block: DiagramBlock, position: Vec2d) => {\n                logMindMap.info(`Block drag end '${block.name}' (${position.x},${position.y})`)\n                this.endDragging(block, position);\n                this.diagramScene.layout();\n\n            });\n            block.on(\"doubleClick\", (block: DiagramBlock) => {\n                logMindMap.info(`Block double click ${block.uid}`);\n                this.diagramScene.setEditedBlock(block)\n                this.diagramScene.activeButtons = []\n            });\n        }\n    }\n\n    componentDidMount() {\n        if (this.vscode)\n            this.vscode.postMessage({ message: \"getDocument\" })\n        else {\n\n\n        }\n\n        this.focus();\n        this.selectRootElement();\n    }\n\n\n    private selectRootElement() {\n        if (this.diagramScene.diagramBlocks.length > 0) {\n            this.diagramScene.selectedBlock = this.diagramScene.diagramBlocks[0];\n        }\n    }\n\n    private focus() {\n        if (this.mainRef && this.mainRef.current) {\n            this.mainRef.current.focus();\n        }\n    }\n\n    @action\n    removeBlock(block: DiagramBlock) {\n        if (block.type === \"mmroot\") return;\n        logMindMap.info(`removeBlock ${block.name}`)\n        let childBlocks = this.diagramScene.diagramStructure.getChildBlocks(block.uid).map(uid => this.diagramScene.diagramStructure.blocks.get(uid) as DiagramBlock)\n        childBlocks.push(block)\n        let connections: DiagramConnection[] = []\n        for (let block of childBlocks) {\n            connections.push(this.diagramScene.diagramStructure.blockConnections.input.get(block.uid)[0] as DiagramConnection)\n\n        }\n\n        for (let block of childBlocks) {\n            let idx = this.diagramScene.diagramBlocks.indexOf(block)\n            this.diagramScene.diagramBlocks.splice(idx, 1)\n        }\n\n        for (let connection of connections) {\n            let idx = this.diagramScene.diagramConnections.indexOf(connection)\n            this.diagramScene.diagramConnections.splice(idx, 1)\n\n        }\n        this.diagramScene.layout()\n        this.diagramScene.onEdit = true;\n        this.diagramScene.selectedBlock = undefined\n        this.diagramScene.activeButtons = []\n    }\n\n\n    @action\n    addSibling(block: DiagramBlock) {\n        if (block.type != \"mmroot\") {\n            let parentUid = this.diagramScene.diagramStructure.blockConnections.input.get(block.uid)[0].from.blockUid\n            let parentBlock = this.diagramScene.diagramStructure.blocks.get(parentUid) as DiagramBlock\n            this.addBlock(parentBlock)\n            this.diagramScene.activeButtons = []\n        }\n\n    }\n\n    @action\n    addBlock(parentBlock: DiagramBlock) {\n        logMindMap.info(`addBlock (parent=${parentBlock.name})`)\n        let block = new DiagramBlock(uuidv4(), \"Unnamed element\", \"mm\", [new Slot(\"i\", \"i\"), new Slot(\"o\", \"o\")], new Rect(0, 0, 100, 30))\n        if (parentBlock.type !== \"mmroot\") {\n            block.style = { ...parentBlock.style }\n        }\n        this.addCallbacks([block])\n\n        let newConnection: DiagramConnection\n        if (parentBlock.type === \"mmroot\") {\n            newConnection = new DiagramConnection({ blockUid: parentBlock.uid, slot: \"or\" }, { blockUid: block.uid, slot: \"i\" }, \"mm\")\n        }\n        else {\n            newConnection = new DiagramConnection({ blockUid: parentBlock.uid, slot: \"o\" }, { blockUid: block.uid, slot: \"i\" }, \"mm\")\n        }\n        this.diagramScene.diagramBlocks.push(block)\n        this.diagramScene.diagramConnections.push(newConnection)\n\n        this.diagramScene.layout()\n        this.diagramScene.setEditedBlock(block)\n        this.diagramScene.selectedBlock = block\n        this.diagramScene.onEdit = true\n        this.diagramScene.activeButtons = []\n        this.addedBlock = block\n\n    }\n\n    @action cancel() {\n        if (this.addedBlock) {\n            this.removeBlock(this.addedBlock)\n            this.addedBlock = undefined\n            this.diagramScene.setEditedBlock(undefined)\n            this.diagramScene.selectedBlock = undefined\n        } else if (this.diagramScene.editedBlock) {\n            this.diagramScene.setEditedBlock(undefined, true)\n        }\n\n\n\n\n    }\n\n    @action\n    endDragging(block: DiagramBlock, dragPosition: Vec2d) {\n        logMindMap.info(`endDragging ${block.name} : (${dragPosition.x}, ${dragPosition.y})`)\n        if (block.type === \"mmroot\") return;\n\n\n        let layout = this.diagramScene.blockLayout\n        let scene = this.diagramScene\n        let structure = scene.diagramStructure\n        let inputConnections = structure.blockConnections.input.get(block.uid)\n        let inputBlock = structure.blocks.get(inputConnections[0].from.blockUid) as DiagramBlock\n\n        let childBlocks = this.diagramScene.diagramStructure.getChildBlocks(block.uid).map(uid => this.diagramScene.diagramStructure.blocks.get(uid) as DiagramBlock)\n        let occupiedBlocks = layout.getBlocks(dragPosition)\n        occupiedBlocks = removeItems(occupiedBlocks, block, ...childBlocks)\n        mindMapDragLog.info(`found N occupied blocks ${occupiedBlocks.length}`)\n        if (occupiedBlocks.length > 0) {\n            let parentBlock = occupiedBlocks[0]\n\n            let blockUids = [block.uid].concat(structure.getChildBlocks(block.uid))\n            let blocks = blockUids.map(blockUid => structure.blocks.get(blockUid) as DiagramBlock)\n            this.diagramScene.diagramConnections = removeItems(scene.diagramConnections, structure.blockConnections.input.get(block.uid)[0])\n\n            this.diagramScene.diagramBlocks = removeItems(this.diagramScene.diagramBlocks, ...blocks)\n\n            //let parentBlock = this.diagramData.getBlock(parentBlockUid)\n            let parentBlockIdx = scene.diagramBlocks.indexOf(parentBlock)\n\n            scene.diagramBlocks.splice(parentBlockIdx + 1, 0, ...blocks)\n            if (parentBlock.type === \"mmroot\") {\n                if (dragPosition.x > 0)\n                    scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: \"or\" }, { blockUid: blockUids[0], slot: \"i\" }, \"mm\"))\n                else\n                    scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: \"ol\" }, { blockUid: blockUids[0], slot: \"i\" }, \"mm\"))\n            } else\n                scene.diagramConnections.push(new DiagramConnection({ blockUid: parentBlock.uid, slot: \"o\" }, { blockUid: blockUids[0], slot: \"i\" }, \"mm\"))\n            scene.layout()\n\n            this.diagramScene.onEdit = true;\n\n            //layout.layout()\n        }\n\n        else {\n            if (inputBlock.type === \"mmroot\") {\n                if (dragPosition.x > 0) {\n                    inputConnections[0].from.slot = \"or\"\n                } else {\n                    inputConnections[0].from.slot = \"ol\"\n                }\n            }\n\n            {\n\n                // let blockColumn = layout.getBlockColumn(block.uid)\n                // let positionColumn = layout.getColumnIdx(dragPosition.x)\n                // mindMapDragLog.info(`Block column ${blockColumn}, position column ${positionColumn}`)\n                // if (positionColumn === blockColumn) {\n                let connection = inputConnections[0]\n                let [idx, blockIdxs] = layout.getChildIdx(block.uid, connection.from.blockUid, dragPosition.y)\n                mindMapDragLog.info(`Child idx ${blockIdxs}[${idx}]`)\n                if (blockIdxs.length > 0) {\n                    let newIdx = -1;\n                    let nextBlock: DiagramBlock | null = null\n                    if (idx === blockIdxs.length) {\n                    } else {\n                        newIdx = blockIdxs[idx]\n                        nextBlock = scene.diagramBlocks[newIdx]\n                    }\n\n                    let blockUids = [block.uid].concat(structure.getChildBlocks(block.uid))\n                    let blocks = blockUids.map(blockUid => structure.blocks.get(blockUid) as DiagramBlock)\n\n                    scene.diagramBlocks = removeItems(scene.diagramBlocks, ...blocks)\n\n                    if (nextBlock) {\n                        let nextConnection = scene.diagramStructure.blockConnections.input.get(nextBlock.uid)[0]\n                        let nextConnectionIdx = scene.diagramConnections.indexOf(nextConnection)\n                        let cidx = this.diagramScene.diagramConnections.indexOf(connection)\n                        this.diagramScene.diagramConnections.splice(cidx, 1)\n                        this.diagramScene.diagramConnections.splice(nextConnectionIdx - 1, 0, connection)\n\n                        let idx = scene.diagramBlocks.indexOf(nextBlock)\n                        scene.diagramBlocks.splice(idx, 0, ...blocks)\n                    }\n                    else {\n                        scene.diagramBlocks.push(...blocks)\n                        let cidx = this.diagramScene.diagramConnections.indexOf(connection)\n                        this.diagramScene.diagramConnections.splice(cidx, 1)\n                        this.diagramScene.diagramConnections.push(connection)\n                    }\n                }\n\n                scene.layout()\n                this.diagramScene.onEdit = true;\n\n\n\n            }\n\n        }\n\n    }\n\n\n    keyDown = (evt: React.KeyboardEvent<HTMLDivElement>) => {\n        console.log(`KeyDown ${evt.key}`)\n        switch (evt.key) {\n            case \"ArrowUp\":\n                this.diagramScene.up();\n                evt.preventDefault();\n                break\n            case \"ArrowDown\":\n                this.diagramScene.down();\n                evt.preventDefault();\n                break\n            case \"ArrowLeft\":\n                this.diagramScene.left()\n                evt.preventDefault();\n                break\n            case \"ArrowRight\":\n                this.diagramScene.right();\n                evt.preventDefault();\n                break\n        }\n\n    }\n    setStyle = (name: string) => {\n        let style = this.styles.get(name)\n        this.diagramScene.setStyle(style)\n        if (this.selectRef && this.selectRef.current) this.selectRef.current.selectedIndex = 0\n    }\n\n    setFont = (size: string) => {\n        let fontSize = parseInt(size)\n        this.diagramScene.setStyle({ fontSize })\n    }\n\n\n    setStrokeWidth = (size: string) => {\n        let strokeWidth = parseInt(size)\n        this.diagramScene.setStyle({ strokeWidth })\n    }\n\n    setMargin = (m: string) => {\n        let margin = parseInt(m)\n        this.diagramScene.setStyle({ margin : {top:margin, bottom : margin, left : margin, right : margin} })\n        \n    }\n\n    setBackgroundColor = (color: string) => {\n        this.diagramScene.setStyle({ backgroundColor: color })\n\n    }\n\n    render() {\n        let backgroundColor : string = ( defaultStyle.backgroundColor)\n        let strokeColor : string  = (defaultStyle.strokeColor)\n        let fontColor : string  = (defaultStyle.fontColor)\n        if (this.diagramScene.selectedBlock) {\n            if (this.diagramScene.selectedBlock.style.backgroundColor) {\n                backgroundColor = this.diagramScene.selectedBlock.style.backgroundColor\n            }\n\n            if (this.diagramScene.selectedBlock.style.strokeColor) {\n                strokeColor = this.diagramScene.selectedBlock.style.strokeColor\n            }\n            if (this.diagramScene.selectedBlock.style.fontColor) {\n                fontColor = this.diagramScene.selectedBlock.style.fontColor\n            }\n\n        }\n        backgroundColor = colourNameToHex(backgroundColor);\n        strokeColor = colourNameToHex(strokeColor);\n        fontColor = colourNameToHex(fontColor)\n\n\n\n        return <div ref={this.mainRef} tabIndex={-1} onKeyDown={(evt) => { this.keyDown(evt) }}>\n\n            <div>{!this.props.vscode && <>\n                <button onClick={evt => this.diagramScene.up()}>up</button>\n                <button onClick={evt => this.diagramScene.down()}>down</button>\n                <button onClick={evt => this.diagramScene.left()}>left</button>\n                <button onClick={evt => this.diagramScene.right()}>right</button>\n                <button onClick={evt => this.cancel()}>cancel</button>\n                <button onClick={evt => this.diagramScene.edit()}>edit</button>\n                <button onClick={evt => this.diagramScene.setStyle({ fontSize: 36 })}>setStyle</button>\n            </>}\n\n                <SelectComponent onChange={this.setStyle} options={[\"Change style\", \"Default style\"].concat(Array.from(this.styles.keys()))}></SelectComponent>\n\n                <SelectComponent onChange={this.setFont} options={[\"Set font size\"].concat(this.fontsSizes.map(val => val.toString()))}></SelectComponent>\n                <SelectComponent onChange={this.setStrokeWidth} options={[\"Set stroke width\"].concat(this.strokeSize.map(val => val.toString()))}></SelectComponent>\n                <SelectComponent onChange={this.setMargin} options={[\"Set margin\"].concat(this.margins.map(val => val.toString()))}></SelectComponent>\n\n                <input type=\"color\" value={backgroundColor} onChange={evt => this.diagramScene.setStyle({ backgroundColor: evt.target.value })}></input>\n\n                <input type=\"color\" value={strokeColor} onChange={evt => this.diagramScene.setStyle({ strokeColor: evt.target.value })}></input>\n                <input type=\"color\" value={fontColor} onChange={evt => this.diagramScene.setStyle({ fontColor: evt.target.value })}></input>\n\n\n            </div>\n            <MM>\n\n                <DiagramEditComponent scene={this.diagramScene}></DiagramEditComponent>\n                <DiagramSceneComponent diagramScene={this.diagramScene}></DiagramSceneComponent>\n            </MM>\n        </div>\n    }\n\n}","\nexport class DiagramImage {\n    image : string\n\n    constructor(image :string) {\n        this.image = image\n    }\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { MindMapComponent } from './components/MindMapComponent';\nimport { DiagramImage } from './lib/state/DiagramImage';\nimport { DiagramScene } from './lib/state/DiagramScene';\nimport { DiagramSceneJSON, DiagramConvert } from './lib/convert/DiagramConvert';\nimport { BlockStyle } from './lib/state/DiagramStyles';\n\n\ndeclare var acquireVsCodeApi: any;\n\nconst App: React.FC = () => {\n  console.log(\"Starting app!!!\")\n\n  let scene = new DiagramScene()\n  let styles : BlockStyle[] = []\n\n  if (typeof acquireVsCodeApi === 'undefined') {\n    let jsonDocument: DiagramSceneJSON = {\n      root: {\n        name: \"Test document\",\n        style: { fontSize: 24 },\n\n        children: {\n          right:\n            [{\n              name: 'one',\n            }]\n\n        }\n      },\n      defaultStyle: {\n        fontSize: 12,\n        fontColor: '#AAAAAA',\n        strokeColor: '#EE0000',\n        strokeWidth: 2,\n        borderRepeat: 1,\n        rx: 10,\n        margin: { bottom: 10, top: 10, left: 10, right: 10 }\n      }\n    }\n\n    scene = DiagramConvert.fromJSON(jsonDocument)\n\n    styles = [{\n      name : \"Big font\",\n      fontSize : 24\n    },\n    {\n      name : \"Normal font\",\n      fontSize : 12\n    }\n    ]\n\n    console.log(DiagramConvert.toJSON(scene))\n\n  }\n\n  function setImageUrl(evt: React.ChangeEvent<HTMLInputElement>) {\n    if (evt.target.files && evt.target.files.length > 0) {\n      var fr = new FileReader();\n      fr.onload = function () {\n        let newImage = new DiagramImage(fr.result as string)\n        scene.diagramBlocks[0].image = newImage\n      }\n      fr.readAsDataURL(evt.target.files[0]);\n    }\n  }\n\n\n  if (typeof acquireVsCodeApi !== 'undefined') {\n    let vscode = acquireVsCodeApi()\n    let jsonDiagram = vscode.getState()\n    return (\n      <div  >\n        <MindMapComponent scene={scene} jsonDiagram={jsonDiagram} vscode={vscode} styles={[]} />\n      </div>\n    );\n  } else {\n    return (\n      <div  >\n        <input type=\"file\" name=\"picField\" id=\"picField\" onChange={(evt) => { setImageUrl(evt) }} />\n\n        <MindMapComponent scene={scene} styles={styles} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}